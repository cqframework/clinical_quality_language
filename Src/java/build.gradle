allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    group = 'info.cqframework'
    version = '2.1.0-SNAPSHOT'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
    }

    dependencies {
        testImplementation group: 'org.testng', name: 'testng', version: '7.4.0'
        testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
        testImplementation group: 'uk.co.datumedge', name: 'hamcrest-json', version: '0.2'
        testImplementation group: 'junit', name: 'junit', version: '4.12'
        testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'
    }

    jar {
        manifest {
            attributes('Implementation-Title': project.name,
                   'Implementation-Version': project.version,
                    'Specification-Title': 'HL7 Clinical Quality Language (CQL)',
                    'Specification-Version': '1.5.2')
        }
    }

    test {
        useTestNG()
    }

    jacoco {
        toolVersion = "0.8.8"
    }

    check.dependsOn(jacocoTestReport)

    /*
       Turn on static code analysis by passing 'sca' as a system property:
       e.g., gradle -Dsca build

       Or add it to your user gradle.properties file (${HOME}/.gradle/gradle.properties):
       systemProp.sca=true
     */
    if (System.getProperty('sca') != null) {
        apply plugin: 'pmd'

        dependencies {
            pmd(
                    'net.sourceforge.pmd:pmd-core:5.3.1',
                    'net.sourceforge.pmd:pmd-java:5.3.1'
            )
        }

        pmd {
            consoleOutput = true
            toolVersion = "5.3.1"
            ruleSetFiles = files("${rootProject.projectDir}/custom-pmd-ruleset.xml")
            ruleSets = []
        }

        apply plugin: 'findbugs'

        findbugs {
            toolVersion = "3.0.1"
            excludeFilter = file("${rootProject.projectDir}/findbugs-exclude-filter.xml")
        }

        tasks.withType(FindBugs) {
            reports {
                xml.enabled = false
                html.enabled = true
            }
        }
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << '-Xlint:unchecked'
        options.deprecation = true
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }
}

/*
JAXB dependencies:
https://mkyong.com/java/jaxbexception-implementation-of-jaxb-api-has-not-been-found-on-module-path-or-classpath/
 */

configure(subprojects.findAll {it.name in ['model', 'model-jackson', 'model-jaxb', 'elm', 'elm-jackson', 'elm-jaxb', 'quick', 'fhir-r4', 'qdm', 'cql-to-elm', 'cql-to-elm-cli']}) {
    configurations {
        xjc
    }

    dependencies {
        xjc group: 'org.jvnet.jaxb2_commons', name: 'jaxb2-basics-ant', version: '0.13.1'
        xjc group: 'org.jvnet.jaxb2_commons', name: 'jaxb2-basics', version: '0.13.1'
        xjc group: 'org.jvnet.jaxb2_commons', name: 'jaxb2-fluent-api', version: '3.0'
        // Eclipse has taken over all Java EE reference components
        // https://www.infoworld.com/article/3310042/eclipse-takes-over-all-java-ee-reference-components.html
        // https://wiki.eclipse.org/Jakarta_EE_Maven_Coordinates
        xjc group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '2.3.3'
        xjc group: 'org.glassfish.jaxb', name: 'jaxb-xjc', version: '2.4.0-b180830.0438'
        xjc group: 'org.eclipse.persistence', name: 'org.eclipse.persistence.moxy', version: '2.7.7'
        xjc group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'
        implementation group: 'org.jvnet.jaxb2_commons', name: 'jaxb2-basics-runtime', version: '0.13.1'
        implementation group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '2.3.3'
    }

    ext.xjc = [
            destDir: "${projectDir}/src/generated/java",
            args: '-disableXmlSecurity -Xfluent-api -Xequals -XhashCode -XtoString'
    ]

    task generateSources {

        outputs.dir xjc.destDir

        doLast {
            file(xjc.destDir).mkdirs()

            ant.taskdef(name: 'xjc', classname: 'org.jvnet.jaxb2_commons.xjc.XJC2Task', classpath: configurations.xjc.asPath)

            /* The above sets up the task, but the real work of the task should be specified in the subproject using
               generateSources.doLast.  For example:
                   generateSources.doLast {
                       ant.xjc(destdir: xjc.destDir, schema: "${projectDir}/path/to/file.xsd") {
                           arg(line: xjc.args)
                       }
                   }
            */
        }
    }

    compileJava.dependsOn generateSources
    sourcesJar.dependsOn generateSources
    sourceSets.main.java.srcDirs += xjc.destDir

    clean {
        delete xjc.destDir
    }
}

/* The following configuration section sets up selected subprojects to be published to Maven Central.  This requires a
   few things:
   - You must have an OSSRH Jira account (https://issues.sonatype.org/secure/Signup!default.jspa)
   - Your account must have privileges to upload info.cqframework artifacts (https://issues.sonatype.org/browse/OSSRH-15514)
   - You must have a gpg key (http://central.sonatype.org/pages/working-with-pgp-signatures.html)
   - You must set your account info and GPG key in your user's gradle.properties file.  For example:
       ossrhUsername=foo
       ossrhPassword=b@r
       signing.keyId=24875D73
       signing.password=secret
       signing.secretKeyRingFile=/Users/me/.gnupg/secring.gpg
   - If the library version ends with '-SNAPSHOT', it will be deployed to the snapshot repository, else it will be
     deployed to the staging repository (which you then must manually release http://central.sonatype.org/pages/releasing-the-deployment.html).
   - Repo for snapshots and releases: https://oss.sonatype.org/content/groups/public/info/cqframework/
   - Repo for snpashots, releases, and staged releases: https://oss.sonatype.org/content/groups/staging/info/cqframework/
 */
configure(subprojects.findAll {it.name in ['cqf-fhir', 'cqf-fhir-npm', 'cql', 'model', 'model-jackson', 'model-jaxb', 'elm', 'elm-jackson', 'elm-jaxb', 'elm-fhir', 'fhir-r4', 'quick', 'cql-to-elm', 'cql-to-elm-cli', 'qdm', 'cql-formatter']}) {
    java {
        withJavadocJar()
        withSourcesJar()
    }

    publishing {
        publications {
            mavenDeployer(MavenPublication) {
                from components.java

                pom {
                    name = project.name
                    packaging = 'jar'
                    description = "The ${project.name} library for the Clinical Quality Language Java reference implementation"
                    url = 'http://cqframework.info'

                    scm {
                        connection = 'scm:git:git@github.com:cqframework/clinical_quality_language.git'
                        developerConnection = 'scm:git:git@github.com:cqframework/clinical_quality_language.git'
                        url = 'git@github.com:cqframework/clinical_quality_language.git'
                    }

                    licenses {
                        license {
                            name ='The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            name = 'Bryn Rhodes'
                        }
                        developer {
                            name = 'Chris Moesel'
                        }
                        developer {
                            name = 'Rob Dingwell'
                        }
                        developer {
                            name = 'Jason Walonoski'
                        }
                        developer {
                            name = 'Marc Hadley'
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                credentials {
                    username project.hasProperty("ossrhUsername") ? ossrhUsername : ""
                    password project.hasProperty("ossrhPassword") ? ossrhPassword : ""
                }

                /* Use these to test locally (but don't forget to comment out others!)
                def releasesRepoUrl = "file://${buildDir}/repo"
                def snapshotsRepoUrl = "file://${buildDir}/ssRepo"
                */

                // change URLs to point to your repos, e.g. http://my.org/repo
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            }
        }
    }

    signing {
        sign publishing.publications.mavenDeployer
    }

    javadoc {
        if(JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }
}

idea {
  project {
    languageLevel = JavaVersion.VERSION_11
    ipr {
      withXml { provider ->
        provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
      }

      whenMerged { project ->
        def examples = new org.gradle.plugins.ide.idea.model.Path('file://$PROJECT_DIR$/examples.iml', 'file://$PROJECT_DIR$/examples.iml', '$PROJECT_DIR$/examples.iml')
        if ((project.modulePaths.findAll { p -> p.url == examples.url }).empty) project.modulePaths.add(examples)

        def grammar = new org.gradle.plugins.ide.idea.model.Path('file://$PROJECT_DIR$/grammar.iml', 'file://$PROJECT_DIR$/grammar.iml', '$PROJECT_DIR$/grammar.iml')
        if ((project.modulePaths.findAll { p -> p.url == grammar.url }).empty) project.modulePaths.add(grammar)

        def cqllm = new org.gradle.plugins.ide.idea.model.Path('file://$PROJECT_DIR$/cql-lm.iml', 'file://$PROJECT_DIR$/cql-lm.iml', '$PROJECT_DIR$/cql-lm.iml')
        if ((project.modulePaths.findAll { p -> p.url == cqllm.url }).empty) project.modulePaths.add(cqllm)
      }
    }
  }
  workspace {
    iws {
      withXml { provider ->
        def props = provider.node.component.find { it.@name == 'PropertiesComponent' }

        def propMap = [
          '$PROJECT_DIR$/../grammar/cql.g4::/output-dir' : '$PROJECT_DIR$/cql/src/generated/java',
          '$PROJECT_DIR$/../grammar/cql.g4::/lib-dir' : '$PROJECT_DIR$/../grammar',
          '$PROJECT_DIR$/../grammar/cql.g4::/package' : 'org.cqframework.cql.gen',
          '$PROJECT_DIR$/../grammar/cql.g4::/gen-listener' : 'true',
          '$PROJECT_DIR$/../grammar/cql.g4::/gen-visitor' : 'true'
        ]

        propMap.each() { key, value ->
          if (! props.property.find { it.@name == key })
            props.appendNode('property', ['name' : key, 'value' : value])
        }
      }
    }
  }
}
