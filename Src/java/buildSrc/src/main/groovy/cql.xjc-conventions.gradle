plugins {
    id 'java'
}

configurations {
    xjc
}

dependencies {
    xjc 'codes.rafael.jaxb2_commons:jaxb2-basics-ant:3.0.0'
    xjc 'codes.rafael.jaxb2_commons:jaxb2-basics:3.0.0'
    xjc 'codes.rafael.jaxb2_commons:jaxb2-fluent-api:3.0.0'
    // Eclipse has taken over all Java EE reference components
    // https://www.infoworld.com/article/3310042/eclipse-takes-over-all-java-ee-reference-components.html
    // https://wiki.eclipse.org/Jakarta_EE_Maven_Coordinates
    xjc 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.1'
    xjc 'org.glassfish.jaxb:jaxb-xjc:3.0.2'
    xjc 'org.glassfish.jaxb:jaxb-runtime:4.0.3'
    xjc 'org.eclipse.persistence:org.eclipse.persistence.moxy:4.0.2'
    xjc 'org.slf4j:slf4j-simple:1.7.36'
    api 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.1'
    api 'codes.rafael.jaxb2_commons:jaxb2-basics-runtime:3.0.0'
}

ext.xjc = [
    destDir: "${buildDir}/generated/sources/$name/main/java",
    args: '-disableXmlSecurity -Xfluent-api -Xequals -XhashCode -XtoString'
]


task generateSources {

    outputs.dir xjc.destDir

    doLast {
        file(xjc.destDir).mkdirs()

        ant.taskdef(name: 'xjc', classname: 'org.jvnet.jaxb2_commons.xjc.XJC2Task', classpath: configurations.xjc.asPath)

        /* The above sets up the task, but the real work of the task should be specified in the subproject using
            generateSources.doLast.  For example:
                generateSources.doLast {
                    ant.xjc(destdir: xjc.destDir, schema: "${projectDir}/path/to/file.xsd") {
                        arg(line: xjc.args)
                    }
                }
        */
    }
}

compileJava {
    dependsOn generateSources
}

sourcesJar {
    dependsOn generateSources
}

sourceSets {
    main {
        java {
            srcDir(xjc.destDir)
        }
    }
}

clean {
    delete xjc.destDir
}
