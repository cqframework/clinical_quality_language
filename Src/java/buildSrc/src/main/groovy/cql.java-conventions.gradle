plugins {
    id 'java'
    id 'maven-publish'
    id 'jacoco'
    id 'signing'
    id 'cql.sca-conventions'
}

java {
    withJavadocJar()
    withSourcesJar()
}

compileJava {
    options.release = 11
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

dependencies {
    implementation 'org.slf4j:slf4j-api:1.7.36'
    testImplementation 'org.testng:testng:7.4.0'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation 'uk.co.datumedge:hamcrest-json:0.2'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.slf4j:slf4j-simple:1.7.36'

    // These are JAXB dependencies excluded because the libraries need to work
    // on Android. But for test purposes we use them pretty much everywhere.
    testRuntimeOnly 'org.eclipse.persistence:org.eclipse.persistence.moxy:4.0.2'
    testRuntimeOnly 'org.eclipse.parsson:parsson:1.1.5'
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Specification-Title': 'HL7 Clinical Quality Language (CQL)',
            'Specification-Version': project['specification.version'])
    }
}

jacoco {
    toolVersion = "0.8.9"
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    reports {
        xml.required = true
    }
    dependsOn test // tests are required to run before generating the report
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
}


tasks.named('test', Test) {
    useTestNG()
}

/*
A few things:
   - You must have an OSSRH Jira account (https://issues.sonatype.org/secure/Signup!default.jspa)
   - Your account must have privileges to upload info.cqframework artifacts (https://issues.sonatype.org/browse/OSSRH-15514)
   - You must have a gpg key (http://central.sonatype.org/pages/working-with-pgp-signatures.html)
   - You must set your account info and GPG key in your user's gradle.properties file.  For example:
       ossrhUsername=foo
       ossrhPassword=b@r
       signing.keyId=24875D73
       signing.password=secret
       signing.secretKeyRingFile=/Users/me/.gnupg/secring.gpg
   - If the library version ends with '-SNAPSHOT', it will be deployed to the snapshot repository, else it will be
     deployed to the staging repository (which you then must manually release http://central.sonatype.org/pages/releasing-the-deployment.html).
   - Repo for snapshots and releases for the translator modules: https://oss.sonatype.org/content/groups/public/info/cqframework/
   - Repo for snpashots, releases, and staged releases for the translator modules: https://oss.sonatype.org/content/groups/staging/info/cqframework/
   - Repo for snapshots and releases for the engine modules: https://oss.sonatype.org/content/groups/public/org/opencds/cqf/cql/
   - Repo for snapshots, releases, and staged releases for the engine modules: https://oss.sonatype.org/content/groups/staging/org/opencds/cqf/cql/
 */
publishing {
    publications {
        mavenDeployer(MavenPublication) {
            from components.java

            pom {
                name = project.name
                packaging = 'jar'
                description = "The ${project.name} library for the Clinical Quality Language Java reference implementation"
                url = 'http://cqframework.info'

                scm {
                    connection = 'scm:git:git@github.com:cqframework/clinical_quality_language.git'
                    developerConnection = 'scm:git:git@github.com:cqframework/clinical_quality_language.git'
                    url = 'git@github.com:cqframework/clinical_quality_language.git'
                }

                licenses {
                    license {
                        name ='The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        name = 'Bryn Rhodes'
                    }
                    developer {
                        name = 'Chris Moesel'
                    }
                    developer {
                        name = 'Rob Dingwell'
                    }
                    developer {
                        name = 'Jason Walonoski'
                    }
                    developer {
                        name = 'Marc Hadley'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username project.hasProperty("ossrhUsername") ? ossrhUsername : System.getenv("OSSRH_USERNAME") != null ? System.getenv("OSSRH_USERNAME") : ""
                password project.hasProperty("ossrhPassword") ? ossrhPassword : System.getenv("OSSRH_TOKEN") != null ? System.getenv("OSSRH_TOKEN") : ""
            }

            /* Use these to test locally (but don't forget to comment out others!)
            def releasesRepoUrl = "file://${buildDir}/repo"
            def snapshotsRepoUrl = "file://${buildDir}/ssRepo"
            */

            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    if (!version.endsWith('SNAPSHOT')){
        sign publishing.publications.mavenDeployer
    }
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}