plugins {
    id 'java'
    id "com.vanniktech.maven.publish"
    id 'jacoco'
    id 'cql.sca-conventions'
    id 'com.diffplug.spotless'
}

import com.vanniktech.maven.publish.JavaLibrary
import com.vanniktech.maven.publish.JavadocJar

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://central.sonatype.com/repository/maven-snapshots/"
    }
}

dependencies {
    implementation 'org.slf4j:slf4j-api:2.0.13'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation 'uk.co.datumedge:hamcrest-json:0.2'
    testImplementation platform('org.junit:junit-bom:5.10.2')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.slf4j:slf4j-simple:2.0.13'

    // These are JAXB dependencies excluded because the libraries need to work
    // on Android. But for test purposes we use them pretty much everywhere.
    testRuntimeOnly 'org.eclipse.persistence:org.eclipse.persistence.moxy:4.0.2'
    testRuntimeOnly 'org.eclipse.parsson:parsson:1.1.5'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Specification-Title': 'HL7 Clinical Quality Language (CQL)',
            'Specification-Version': project['specification.version'])
    }
}

jacoco {
    toolVersion = "0.8.11"
}

test {
    useJUnitPlatform()
    testLogging {
        events "skipped", "failed"
    }
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    reports {
        xml.required = true
    }
    dependsOn test // tests are required to run before generating the report
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addBooleanOption('html5', true)
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
}

spotless {
  java {
    targetExclude '**/generated/**'
    palantirJavaFormat()
  }
}

/*
A few things:
   - You must have a Maven Central account (https://central.sonatype.org/register/central-portal/)
   - Your account must have privileges to upload info.cqframework artifacts 
   - You must have a gpg key (http://central.sonatype.org/pages/working-with-pgp-signatures.html)
   - You must set your account info and GPG key in your user's gradle.properties file.  For example:
       mavenCentralUsername=foo
       mavenCentralPassword=b@r
       signing.keyId=24875D73
       signing.password=secret
       signing.secretKeyRingFile=/Users/me/.gnupg/secring.gpg
   - If the library version ends with '-SNAPSHOT', it will be deployed to the snapshot repository, else it will be
     deployed to the staging repository (which you then must manually release http://central.sonatype.org/pages/releasing-the-deployment.html).
   - Repo for snapshots for the translator modules: https://central.sonatype.com/repository/maven-snapshots/info/cqframework/
   - Repo for releases for the translator modules: https://central.sonatype.com/repository/maven-releases/info/cqframework/
 */
mavenPublishing {
    configure(new JavaLibrary(new JavadocJar.Javadoc(), true))

    publishToMavenCentral(true)
    if (!version.endsWith('SNAPSHOT')) {
        signAllPublications()
    }
    coordinates(project.group, project.name, project.version) 
    pom {
        name = project.name
        description = "The ${project.name} library for the Clinical Quality Language Java reference implementation"
        url = 'http://cqframework.org'

        licenses {
            license {
                name ='The Apache License, Version 2.0'
                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
        }
        
        scm {
            connection = 'scm:git:git@github.com:cqframework/clinical_quality_language.git'
            developerConnection = 'scm:git:git@github.com:cqframework/clinical_quality_language.git'
            url = 'git@github.com:cqframework/clinical_quality_language.git'
        }

        developers {
            developer {
                name = 'Bryn Rhodes'
            }
            developer {
                name = 'Chris Moesel'
            }
            developer {
                name = 'Rob Dingwell'
            }
            developer {
                name = 'Jason Walonoski'
            }
            developer {
                name = 'Marc Hadley'
            }
            developer {
                name = 'Jonathan Percival'
            }
            developer {
                name = 'Anton Vasetenkov'
            }
            developer {
                name = 'Luke deGruchy'
            }
        }
    }
}