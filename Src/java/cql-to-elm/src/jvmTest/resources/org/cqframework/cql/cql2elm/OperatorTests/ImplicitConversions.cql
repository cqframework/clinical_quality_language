codesystem "http://snomed.info/sct": 'http://snome.info/sct'

// Integer to Long
define IntegerToLongEqual: 5 = 5L
define IntegerLongMultiplication: 5 * 5L
define LongIntegerMultiplication: 5L * 5

// Long to Decimal
define LongToDecimalEqual: 5L = 5.0
define LongToDecimalMultiplication: 5L * 5.0
define DecimalToLongMultiplication: 5.0 * 5L

// Integer to Decimal
define ThisShouldWork: 5 = 5.5
define IntegerDecimalMultiplication: 5 * 5.0
define DecimalIntegerMultiplication: 5.0 * 5

// Integer to Quantity
define IntegerQuantityEquality: 5 = 5.5 'g'
define QuantityIntegerEquality: 5.5 'g' = 5
define IntegerQuantityAddition: 5 + 5.5 'g'
define QuantityIntegerAddition: 5.5 'g' + 5
define IntegerQuantityMultiplication: 5 * 5.5 'g'
define QuantityIntegerMultiplication: 5.5 'g' * 5
define IntegerQuantityDivision: 5 / 5.5 'g'
define QuantityIntegerDivision: 5.5 'g' / 5

// Decimal to Quantity
define DecimalQuantityEquality: 5.0 = 5.5 'g'
define QuantityDecimalEquality: 5.5 'g' = 5.0
define DecimalQuantityAddition: 5.0 + 5.5 'g'
define QuantityDecimalAddition: 5.5 'g' + 5.0
define DecimalQuantityMultiplication: 5.0 * 5.5 'g'
define QuantityDecimalMultiplication: 5.5 'g' * 5.0
define DecimalQuantityDivision: 5.0 / 5.5 'g'
define QuantityDecimalDivision: 5.5 'g' / 5.0

// Date to DateTime
define DateTimeDateEquality: @2017-01-01T10:30:00.0 = @2017-01-01

// null to any type
define IntegerAnyMultiplication: 5 * null

// Within Coalesce
define NullCoalesce: Coalesce(null, 1, 2, 3)
define IntegerCoalesce: Coalesce(1, 2.0, 3.0, null)
define DecimalCoalesce: Coalesce(1.0, 2, 3, null)

// Within Interval selector
define IntegerIntervalSelector: Interval[5, null]
define DecimalIntervalSelector: Interval[5, 5.0]

// Within List selector
define EmptyList: { }
define IntegerList: { null, 1 }
define DecimalList: { 1, 1.5 }
define DecimalIntegerList: { 1.5, 1 }
define ExplicitIntegerList: List<Integer> { null, 1, 2, 3 }
define ExplicitDecimalList: List<Decimal> { 1.0, null, 3 }

// Within If
define NullIf: if true then null else 1
define IntegerIf: if true then 1 else null
define DecimalIf: if true then 1 else 1.0

// Within Case
define NullCase: case when true then null else 1 end
define IntegerCase: case when true then 1 else null end
define DecimalCase: case when true then 1 else 1.0 end
define DecimalIntegerCase: case when true then 1.0 else 1 end
define NullComparandCase: case 1 when null then 0 else 1 end
define IntegerComparandCase: case 1.0 when 1 then 1.0 else 1 end

// Implicit List Conversions
define v: Variance({1,2,3,4,5})
define std: StdDev({1,2,3,4,5})
define dev: PopulationStdDev({1,2,3,4,5})

// Implicit Interval Conversions
define ImplicitIntervalConversion: Interval[3.0, 5.0] = Interval[3, 5]

define NullList: (null as List<System.Any>)[1]

define NullIncluded: (null as List<System.Integer>) properly included in {1, 2, 3, 4, 5}

// Implicit Code To Concept
define CodeToConcept: Concept { Code 'XYZ' from "http://snomed.info/sct" } = Code { code: 'XYZ', system: 'http://snomed.info/sct' }
define CodesToConcept: Concept { Code 'XYZ' from "http://snomed.info/sct" } = { Code { code: 'XYZ', system: 'http://snomed.info/sct' } }
