<?xml version="1.0" encoding="utf-8"?>
<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://hl7.org/fhirpath/tests" xsi:schemaLocation="http://hl7.org/fhirpath/tests ../testSchema/testSchema.xsd">
	<!-- Some tests thrown in by Brian -->
	<group name="Patient tests">
		<test name="extract birthDate" inputfile="patient-example.xml" predicate="false">
			<expression>Patient.birthDate</expression>
			<output type="date">1974-12-25</output>
		</test>
		<test name="patient has a birthDate" inputfile="patient-example.xml" predicate="true">
			<expression>exists (Patient.birthDate)</expression>
			<output type="boolean">true</output>
		</test>
		<test name="patient telecom types" inputfile="patient-example.xml">
			<expression>Patient.telecom.use</expression>
			<output type="code">home</output>
			<output type="code">work</output>
		</test>
	</group>
	<!-- Tests ported from the Java Unit Tests -->
	<group name="Basics">
		<!-- test(patient(), "name.given", 3, "string"); -->
		<test name="testSimple" inputfile="patient-example.xml">
			<expression>Patient.name.given</expression>
			<output type="string">Peter</output>
			<output type="string">James</output>
			<output type="string">Jim</output>
		</test>
		<!-- test(patient(), "name.period", 0); -->
		<test name="testSimpleNone" inputfile="patient-example.xml">
			<expression>Patient.name.period</expression>
		</test>
		<!-- test(patient(), "name.\"given\"", 3, "string"); -->
		<test name="testSimpleDoubleQuotes" inputfile="patient-example.xml">
			<expression>Patient.name."given"</expression>
			<output type="string">Peter</output>
			<output type="string">James</output>
			<output type="string">Jim</output>
		</test>
		<!-- testWrong(patient(), "name.given1"); -->
		<test name="testSimpleFail" inputfile="patient-example.xml">
			<expression invalid="true">Patient.name.given1</expression>
		</test>
		<!-- test(patient(), "Patient.name.given", 3, "string"); -->
		<test name="testSimpleWithContext" inputfile="patient-example.xml">
			<expression>Patient.name.given</expression>
			<output type="string">Peter</output>
			<output type="string">James</output>
			<output type="string">Jim</output>
		</test>
		<!-- testWrong(patient(), "Encounter.name.given"); -->
		<test name="testSimpleWithWrongContext" inputfile="patient-example.xml">
			<expression invalid="true">Encounter.name.given</expression>
		</test>
	</group>
	<group name="Observations">
		<!-- test(observation(), "Observation.value.unit", 1, "string"); -->
		<test name="testPolymorphismA" inputfile="observation-example.xml">
			<expression>Observation.value.unit</expression>
			<output type="string">lbs</output>
		</test>
		<!-- testWrong(observation(), "Observation.valueQuantity.unit"); -->
		<test name="testPolymorphismB" inputfile="observation-example.xml">
			<expression invalid="true">Observation.valueQuantity.unit</expression>
		</test>
		<!-- testBoolean(observation(), "Observation.value.is(Quantity)", true); -->
		<!-- BTR: .is and .as were removed as methods and introduced in the grammar only
		so that we can tell we are resolving a type name, not an expression -->
		<!-- test name="testPolymorphismIsA" inputfile="observation-example.xml">
			<expression>Observation.value.is(Quantity)</expression>
			<output type="boolean">true</output>
		</test-->
		<!-- testBoolean(observation(), "Observation.value is Quantity", true); -->
		<test name="testPolymorphismIsA" inputfile="observation-example.xml">
			<expression>Observation.value is Quantity</expression>
			<output type="boolean">true</output>
		</test>
		<!-- testBoolean(observation(), "Observation.value.is(Period).not()", true); -->
		<test name="testPolymorphismIsB" inputfile="observation-example.xml">
			<expression>(Observation.value is Period).not()</expression>
			<output type="boolean">true</output>
		</test>
		<!-- testBoolean(observation(), "Observation.value.as(Quantity).unit", true); -->
		<test name="testPolymorphismAsA" inputfile="observation-example.xml">
			<expression>(Observation.value as Quantity).unit</expression>
			<output type="string">lbs</output>
		</test>
		<!-- testBoolean(observation(), "(Observation.value as Quantity).unit", true); -->
		<test name="testPolymorphismAsA" inputfile="observation-example.xml">
			<expression>(Observation.value as Quantity).unit</expression>
			<output type="string">lbs</output>
		</test>
		<!-- testWrong(observation(), "(Observation.value as Period).unit"); -->
		<test name="testPolymorphismAsB" inputfile="observation-example.xml">
			<expression invalid="true">(Observation.value as Period).unit</expression>
		</test>
		<!-- test(observation(), "Observation.value.as(Period).start", 0); -->
		<test name="testPolymorphismAsC" inputfile="observation-example.xml">
			<!-- NOTE: "start" is a reserved word in CQL, so to get this to pass in CQL, you have to use quotes...
				we could make it just a keyword, but it would require a change to the grammar.
				Submitting a ballot comment for this. -->
			<expression>(Observation.value as Period)."start"</expression>
		</test>
	</group>
	<group name="Dollar">
		<!-- test(patient(), "Patient.name.given.where(substring($this.length()-3) = 'out')", 0); -->
		<test name="testDollarThis1" inputfile="patient-example.xml">
			<expression>Patient.name.given.where(substring($this.length()-3) = 'out')</expression>
		</test>
		<!-- test(patient(), "Patient.name.given.where(substring($this.length()-3) = 'ter')", 1, "string"); -->
		<test name="testDollarThis2" inputfile="patient-example.xml">
			<expression>Patient.name.given.where(substring($this.length()-3) = 'ter')</expression>
			<output type="string">Peter</output>
		</test>
		<!-- test(patient(), "Patient.name.skip(1).given", 1, "string"); -->
		<test name="testDollarOrderAllowed" inputfile="patient-example.xml">
			<expression>Patient.name.skip(1).given</expression>
			<output type="string">Jim</output>
		</test>
		<!-- test(patient(), "Patient.name.skip(3).given", 0); -->
		<test name="testDollarOrderAllowedA" inputfile="patient-example.xml">
			<expression>Patient.name.skip(3).given</expression>
		</test>
		<!-- testWrong(patient(), "Patient.children().skip(1)"); -->
		<test name="testDollarOrderNotAllowed" inputfile="patient-example.xml">
			<expression invalid="true">Patient.children().skip(1)</expression>
		</test>
	</group>
	<group name="Literals">
		<!-- testBoolean(patient(), "Patient.name.exists() = true", true); -->
		<test name="testLiteralTrue" inputfile="patient-example.xml">
			<expression>Patient.name.exists() = true</expression>
			<output type="boolean">true</output>
		</test>
		<!-- testBoolean(patient(), "Patient.name.empty() = false", true); -->
		<test name="testLiteralFalse" inputfile="patient-example.xml">
			<expression>Patient.name.empty() = false</expression>
			<output type="boolean">true</output>
		</test>
		<!-- testBoolean(patient(), "Patient.name.given.first() = 'Peter'", true); -->
		<test name="testLiteralString" inputfile="patient-example.xml">
			<expression>Patient.name.given.first() = 'Peter'</expression>
			<output type="boolean">true</output>
		</test>
		<test name="testLiteralInteger" inputfile="patient-example.xml">
			<expression>-3 != 3</expression>
			<output type="boolean">true</output>
		</test>
		<test name="testLiteralInteger" inputfile="patient-example.xml">
			<expression>Patient.name.given.count() = 3</expression>
			<output type="boolean">true</output>
		</test>
		<test name="testLiteralInteger" inputfile="patient-example.xml">
			<expression>Patient.name.given.count() &gt; -3</expression>
			<output type="boolean">true</output>
		</test>
		<test name="testLiteralInteger" inputfile="patient-example.xml">
			<expression>Patient.name.given.count() != 0</expression>
			<output type="boolean">true</output>
		</test>
		<test name="testLiteralInteger" inputfile="patient-example.xml">
			<expression>1 &lt; 2</expression>
			<output type="boolean">true</output>
		</test>
		<test name="testLiteralInteger" inputfile="patient-example.xml">
			<expression>1 &lt; -2</expression>
			<output type="boolean">false</output>
		</test>
		<test name="testLiteralInteger" inputfile="patient-example.xml">
			<expression>+1 &lt; +2</expression>
			<output type="boolean">true</output>
		</test>
		<test name="testLiteralInteger" inputfile="patient-example.xml">
			<expression>-1 &lt; 2</expression>
			<output type="boolean">true</output>
		</test>
		<test name="testLiteralDecimal" inputfile="observation-example.xml">
			<expression>Observation.value.value &gt; 180.0</expression>
			<output type="boolean">true</output>
		</test>
		<test name="testLiteralDecimal" inputfile="observation-example.xml">
			<expression>Observation.value.value &gt; 0.0</expression>
			<output type="boolean">true</output>
		</test>
		<test name="testLiteralDecimal" inputfile="observation-example.xml">
			<expression>Observation.value.value &gt; 0</expression>
			<output type="boolean">true</output>
		</test>
		<test name="testLiteralDecimal" inputfile="observation-example.xml">
			<expression>Observation.value.value &lt; 190</expression>
			<output type="boolean">true</output>
		</test>
		<test name="testLiteralDecimal" inputfile="observation-example.xml">
			<expression>Observation.value.value &lt; 'test'</expression>
			<!-- no output - empty set -->
		</test>
		<test name="testLiteralDate" inputfile="patient-example.xml">
			<expression>Patient.birthDate = @1974-12-25</expression>
			<output type="boolean">true</output>
		</test>
		<test name="testLiteralDate" inputfile="patient-example.xml">
			<expression>Patient.birthDate != @1974-12-25T12:34:00</expression>
			<output type="boolean">true</output>
		</test>
		<test name="testLiteralDate" inputfile="patient-example.xml">
			<expression>Patient.birthDate != @1974-12-25T12:34:00-10:00</expression>
			<output type="boolean">true</output>
		</test>
		<test name="testLiteralDate" inputfile="patient-example.xml">
			<expression>Patient.birthDate != @1974-12-25T12:34:00+10:00</expression>
			<output type="boolean">true</output>
		</test>
		<test name="testLiteralDate" inputfile="patient-example.xml">
			<expression>Patient.birthDate != @1974-12-25T12:34:00Z</expression>
			<output type="boolean">true</output>
		</test>
		<test name="testLiteralDate" inputfile="patient-example.xml">
			<expression>Patient.birthDate != @T12:14:15</expression>
			<output type="boolean">true</output>
		</test>
		<test name="testLiteralDate" inputfile="patient-example.xml">
			<expression>Patient.birthDate != @T12:14</expression>
			<output type="boolean">true</output>
		</test>
		<test name="testLiteralUnicode" inputfile="patient-example.xml">
			<expression>Patient.name.given.first() = 'P\u0065ter'</expression>
			<output type="boolean">true</output>
		</test>
		<test name="testLiteralEmptyCollection" inputfile="patient-example.xml">
			<expression>Patient.name.given != {}</expression>
			<output type="boolean">true</output>
		</test>
		<test name="testExpressions" inputfile="patient-example.xml">
			<expression>Patient.name.select(given | family).distinct()</expression>
			<output type="string">Peter</output>
			<output type="string">James</output>
			<output type="string">Chalmers</output>
			<output type="string">Jim</output>
		</test>
		<test name="testExpressions" inputfile="patient-example.xml">
			<expression>Patient.name.given.count() = 1 + 2</expression>
			<output type="boolean">true</output>
		</test>
		<test name="testEmpty" inputfile="patient-example.xml">
			<expression>Patient.name.empty().not()</expression>
			<output type="boolean">true</output>
		</test>
		<test name="testEmpty" inputfile="patient-example.xml">
			<expression>Patient.link.empty()</expression>
			<output type="boolean">true</output>
		</test>
		<test name="testLiteralDate" inputfile="patient-example.xml">
			<expression>true.not() = false</expression>
			<output type="boolean">true</output>
		</test>
		<test name="testLiteralDate" inputfile="patient-example.xml">
			<expression>false.not() = true</expression>
			<output type="boolean">true</output>
		</test>
		<test name="testLiteralDate" inputfile="patient-example.xml">
			<expression>(0).not() = false</expression>
			<output type="boolean">true</output>
		</test>
		<test name="testLiteralDate" inputfile="patient-example.xml">
			<expression>(1).not() = false</expression>
			<output type="boolean">true</output>
		</test>
		<test name="testLiteralDate" inputfile="patient-example.xml">
			<expression>(1|2).not() = false</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testAll">
		<test inputfile="patient-example.xml">
			<expression>Patient.name.select(given.exists()).all()</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>Patient.name.select(family.exists()).all()</expression>
			<output type="boolean">false</output>
		</test>
	</group>
	<group name="testSubSetOf">
		<test inputfile="patient-example.xml">
			<expression>Patient.name.first().subsetOf($this.name)</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>Patient.name.subsetOf($this.name.first()).not()</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testSuperSetOf">
		<test inputfile="patient-example.xml">
			<expression>Patient.name.first().supersetOf($this.name).not()</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>Patient.name.supersetOf($this.name.first())</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testDistinct">
		<test inputfile="patient-example.xml">
			<expression>(1 | 2 | 3).isDistinct()</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="questionnaire-example.xml">
			<expression>Questionnaire.descendants().linkId.isDistinct()</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="questionnaire-example.xml">
			<expression>Questionnaire.descendants().linkId.select(substring(0,1)).isDistinct().not()</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>(1 | 2 | 3).distinct()</expression>
			<output type="integer">1</output>
			<output type="integer">2</output>
			<output type="integer">3</output>
		</test>
		<test inputfile="questionnaire-example.xml">
			<expression>Questionnaire.descendants().linkId.distinct()</expression>
			<output type="string"/>
			<output type="string"/>
			<output type="string"/>
			<output type="string"/>
			<output type="string"/>
			<output type="string"/>
			<output type="string"/>
			<output type="string"/>
			<output type="string"/>
		</test>
		<test inputfile="questionnaire-example.xml">
			<expression>Questionnaire.descendants().linkId.select(substring(0,1)).distinct()</expression>
			<output type="string"/>
			<output type="string"/>
		</test>
	</group>
	<group name="testCount">
		<test inputfile="patient-example.xml">
			<expression>Patient.name.count()</expression>
			<output type="integer">2</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>Patient.name.count() = 2</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>Patient.name.first().count()</expression>
			<output type="integer">1</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>Patient.name.first().count() = 1</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testWhere">
		<test inputfile="patient-example.xml">
			<expression>Patient.name.count() = 2</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>Patient.name.where(given = 'Jim').count() = 1</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>Patient.name.where(given = 'X').count() = 0</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>Patient.name.where($this.given = 'Jim').count() = 1</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testSelect">
		<test inputfile="patient-example.xml">
			<expression>Patient.name.select(given) = 'Peter' | 'James' | 'Jim'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>Patient.name.select(given | family) = 'Peter' | 'James' | 'Chalmers' | 'Jim'</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testRepeat">
		<test inputfile="valueset-example-expansion.xml">
			<expression>ValueSet.expansion.repeat(contains).count() = 10</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="questionnaire-example.xml">
			<expression>Questionnaire.repeat(item).concept.count() = 10</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="questionnaire-example.xml">
			<expression>Questionnaire.descendants().concept.count() = 10</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="questionnaire-example.xml">
			<expression>Questionnaire.children().concept.count() = 2</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testIndexer">
		<test inputfile="patient-example.xml">
			<expression>Patient.name[0].given = 'Peter' | 'James'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>Patient.name[1].given = 'Jim'</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testSingle">
		<test inputfile="patient-example.xml">
			<expression>Patient.name.first().single().exists()</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression invalid="true">Patient.name.single().exists()</expression>
		</test>
	</group>
	<group name="testFirstLast">
		<test inputfile="patient-example.xml">
			<expression>Patient.name.first().given = 'Peter' | 'James'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>Patient.name.last().given = 'Jim'</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testTail">
		<test inputfile="patient-example.xml">
			<expression>(0 | 1 | 2).tail() = 1 | 2</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>Patient.name.tail().given = 'Jim'</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testSkip">
		<test inputfile="patient-example.xml">
			<expression>(0 | 1 | 2).skip(1) = 1 | 2</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>(0 | 1 | 2).skip(2) = 2</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>Patient.name.skip(1).given = 'Jim'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>Patient.name.skip(2).given.exists() = false</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testTake">
		<test inputfile="patient-example.xml">
			<expression>(0 | 1 | 2).take(1) = 0</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>(0 | 1 | 2).take(2) = 0 | 1</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>Patient.name.take(1).given = 'Peter' | 'James'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>Patient.name.take(2).given = 'Peter' | 'James' | 'Jim'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>Patient.name.take(3).given = 'Peter' | 'James' | 'Jim'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>Patient.name.take(0).given.exists() = false</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testIif">
		<test inputfile="patient-example.xml">
			<expression>iif(Patient.name.exists(), 'named', 'unnamed') = 'named'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>iif(Patient.name.empty(), 'unnamed', 'named') = 'named'</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testToInteger">
		<test inputfile="patient-example.xml">
			<expression>'1'.toInteger() = 1</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'-1'.toInteger() = -1</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'0'.toInteger() = 0</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'0.0'.toInteger().empty()</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'st'.toInteger().empty()</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testToDecimal">
		<test inputfile="patient-example.xml">
			<expression>'1'.toDecimal() = 1</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'-1'.toInteger() = -1</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'0'.toDecimal() = 0</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'0.0'.toDecimal() = 0.0</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'st'.toDecimal().empty()</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testToString">
		<test inputfile="patient-example.xml">
			<expression>1.toString() = '1'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'-1'.toInteger() = -1</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>0.toString() = '0'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>0.0.toString() = '0.0'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2014-12-14.toString() = '2014-12-14'</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testSubstring">
		<test inputfile="patient-example.xml">
			<expression>'12345'.substring(2) = '345'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'12345'.substring(2,1) = '3'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'12345'.substring(2,5) = '345'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'12345'.substring(25).empty()</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'12345'.substring(-1).empty()</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testStartsWith">
		<test inputfile="patient-example.xml">
			<expression>'12345'.startsWith('2') = false</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'12345'.startsWith('1') = true</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'12345'.startsWith('12') = true</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'12345'.startsWith('13') = false</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'12345'.startsWith('12345') = true</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'12345'.startsWith('123456') = false</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'12345'.startsWith('') = false</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testEndsWith">
		<test inputfile="patient-example.xml">
			<expression>'12345'.endsWith('2') = false</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'12345'.endsWith('5') = true</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'12345'.endsWith('45') = true</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'12345'.endsWith('35') = false</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'12345'.endsWith('12345') = true</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'12345'.endsWith('012345') = false</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'12345'.endsWith('') = false</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testContainsString">
		<test inputfile="patient-example.xml">
			<expression>'12345'.contains('6') = false</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'12345'.contains('5') = true</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'12345'.contains('45') = true</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'12345'.contains('35') = false</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'12345'.contains('12345') = true</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'12345'.contains('012345') = false</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'12345'.contains('') = false</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testLength">
		<test inputfile="patient-example.xml">
			<expression>'123456'.length() = 6</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'12345'.length() = 5</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'123'.length() = 3</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'1'.length() = 1</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>''.length() = 0</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testTrace">
		<test inputfile="patient-example.xml">
			<expression>name.given.trace('test').count() = 3</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testToday">
		<test inputfile="patient-example.xml">
			<expression>Patient.birthDate &lt; today()</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>today().toString().length() = 10</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testNow">
		<test inputfile="patient-example.xml">
			<expression>Patient.birthDate &lt; now()</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>now().toString().length() > 10</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testEquality">
		<test inputfile="patient-example.xml">
			<expression>1 = 1</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>{} = {}</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1 = 2</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'a' = 'a'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'a' = 'A'</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'a' = 'b'</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1.1 = 1.1</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1.1 = 1.2</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1.10 = 1.1</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>0 = 0</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>0.0 = 0</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2012-04-15 = @2012-04-15</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2012-04-15 = @2012-04-16</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2012-04-15 = @2012-04-15T10:00:00</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>name = name</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>name = name.first() | name.last()</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>name = name.last() | name.first()</expression>
			<output type="boolean">false</output>
		</test>
	</group>
	<group name="testNEquality">
		<test inputfile="patient-example.xml">
			<expression>1 != 1</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>{} != {}</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1 != 2</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'a' != 'a'</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'a' != 'b'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1.1 != 1.1</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1.1 != 1.2</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1.10 != 1.1</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>0 != 0</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>0.0 != 0</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2012-04-15 != @2012-04-15</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2012-04-15 != @2012-04-16</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2012-04-15 != @2012-04-15T10:00:00</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>name != name</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>name != name.first() | name.last()</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>name != name.last() | name.first()</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testEquivalent">
		<test inputfile="patient-example.xml">
			<expression>1 ~ 1</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>{} ~ {}</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1 ~ 2</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'a' ~ 'a'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'a' ~ 'A'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'a' ~ 'b'</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1.1 ~ 1.1</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1.1 ~ 1.2</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1.10 ~ 1.1</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>0 ~ 0</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>0.0 ~ 0</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2012-04-15 ~ @2012-04-15</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2012-04-15 ~ @2012-04-16</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2012-04-15 ~ @2012-04-15T10:00:00</expression>
			<output type="boolean">true</output>
		</test>
		<!--    <test inputfile="patient-example.xml"><expression>name ~ name</expression><output type="boolean">true</output></test> -->
		<test inputfile="patient-example.xml">
			<expression>name.given ~ name.first().given | name.last().given</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>name.given ~ name.last().given | name.first().given</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testNotEquivalent">
		<test inputfile="patient-example.xml">
			<expression>1 !~ 1</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>{} !~ {}</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1 !~ 2</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'a' !~ 'a'</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'a' !~ 'A'</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'a' !~ 'b'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1.1 !~ 1.1</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1.1 !~ 1.2</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1.10 !~ 1.1</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>0 !~ 0</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>0.0 !~ 0</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2012-04-15 !~ @2012-04-15</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2012-04-15 !~ @2012-04-16</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2012-04-15 !~ @2012-04-15T10:00:00</expression>
			<output type="boolean">false</output>
		</test>
		<!--    <test inputfile="patient-example.xml"><expression>name !~ name</expression><output type="boolean">true</output></test> -->
		<test inputfile="patient-example.xml">
			<expression>name.given !~ name.first().given | name.last().given</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>name.given !~ name.last().given | name.first().given</expression>
			<output type="boolean">false</output>
		</test>
	</group>
	<group name="testLessThan">
		<test inputfile="patient-example.xml">
			<expression>1 &lt; 2</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1.0 &lt; 1.2</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'a' &lt; 'b'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'A' &lt; 'a'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2014-12-12 &lt; @2014-12-13</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2014-12-13T12:00:00 &lt; @2014-12-13T12:00:01</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@T12:00:00 &lt; @T14:00:00</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1 &lt; 1</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1.0 &lt; 1.0</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'a' &lt; 'a'</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'A' &lt; 'A'</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2014-12-12 &lt; @2014-12-12</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2014-12-13T12:00:00 &lt; @2014-12-13T12:00:00</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@T12:00:00 &lt; @T12:00:00</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>2 &lt; 1</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1.1 &lt; 1.0</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'b' &lt; 'a'</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'B' &lt; 'A'</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2014-12-13 &lt; @2014-12-12</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2014-12-13T12:00:01 &lt; @2014-12-13T12:00:00</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@T12:00:01 &lt; @T12:00:00</expression>
			<output type="boolean">false</output>
		</test>
	</group>
	<group name="testLessOrEqual">
		<test inputfile="patient-example.xml">
			<expression>1 &lt;= 2</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1.0 &lt;= 1.2</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'a' &lt;= 'b'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'A' &lt;= 'a'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2014-12-12 &lt;= @2014-12-13</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2014-12-13T12:00:00 &lt;= @2014-12-13T12:00:01</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@T12:00:00 &lt;= @T14:00:00</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1 &lt;= 1</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1.0 &lt;= 1.0</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'a' &lt;= 'a'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'A' &lt;= 'A'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2014-12-12 &lt;= @2014-12-12</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2014-12-13T12:00:00 &lt;= @2014-12-13T12:00:00</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@T12:00:00 &lt;= @T12:00:00</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>2 &lt;= 1</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1.1 &lt;= 1.0</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'b' &lt;= 'a'</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'B' &lt;= 'A'</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2014-12-13 &lt;= @2014-12-12</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2014-12-13T12:00:01 &lt;= @2014-12-13T12:00:00</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@T12:00:01 &lt;= @T12:00:00</expression>
			<output type="boolean">false</output>
		</test>
	</group>
	<group name="testGreatorOrEqual">
		<test inputfile="patient-example.xml">
			<expression>1 >= 2</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1.0 >= 1.2</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'a' >= 'b'</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'A' >= 'a'</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2014-12-12 >= @2014-12-13</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2014-12-13T12:00:00 >= @2014-12-13T12:00:01</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@T12:00:00 >= @T14:00:00</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1 >= 1</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1.0 >= 1.0</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'a' >= 'a'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'A' >= 'A'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2014-12-12 >= @2014-12-12</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2014-12-13T12:00:00 >= @2014-12-13T12:00:00</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@T12:00:00 >= @T12:00:00</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>2 >= 1</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1.1 >= 1.0</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'b' >= 'a'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'B' >= 'A'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2014-12-13 >= @2014-12-12</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2014-12-13T12:00:01 >= @2014-12-13T12:00:00</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@T12:00:01 >= @T12:00:00</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testGreatorThan">
		<test inputfile="patient-example.xml">
			<expression>1 > 2</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1.0 > 1.2</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'a' > 'b'</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'A' > 'a'</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2014-12-12 > @2014-12-13</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2014-12-13T12:00:00 > @2014-12-13T12:00:01</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@T12:00:00 > @T14:00:00</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1 > 1</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1.0 > 1.0</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'a' > 'a'</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'A' > 'A'</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2014-12-12 > @2014-12-12</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2014-12-13T12:00:00 > @2014-12-13T12:00:00</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@T12:00:00 > @T12:00:00</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>2 > 1</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1.1 > 1.0</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'b' > 'a'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'B' > 'A'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2014-12-13 > @2014-12-12</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@2014-12-13T12:00:01 > @2014-12-13T12:00:00</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>@T12:00:01 > @T12:00:00</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testUnion">
		<test inputfile="patient-example.xml">
			<expression>(1 | 2 | 3).count() = 3</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>(1 | 2 | 2).count() = 2</expression>
			<output type="boolean">true</output>
		</test>
		<!-- merge duplicates -->
	</group>
	<group name="testIn">
		<test inputfile="patient-example.xml">
			<expression>1 in (1 | 2 | 3)</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1 in (2 | 3)</expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'a' in ('a' | 'c' | 'd')</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'b' in ('a' | 'c' | 'd')</expression>
			<output type="boolean">false</output>
		</test>
	</group>
	<group name="testContainsCollection">
		<test inputfile="patient-example.xml">
			<expression>(1 | 2 | 3) contains 1</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>(2 | 3) contains 1 </expression>
			<output type="boolean">false</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>('a' | 'c' | 'd') contains 'a'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>('a' | 'c' | 'd') contains 'b'</expression>
			<output type="boolean">false</output>
		</test>
	</group>
	<group name="testBooleanLogicAnd">
		<test inputfile="patient-example.xml">
			<expression>(true and true) = true</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>(true and false) = false</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>(true and {}) = {}</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>(false and true) = false</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>(false and false) = false</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>(false and {}) = false</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>({} and true) = {}</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>({} and false) = false</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>({} and {}) = {}</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testBooleanLogicOr">
		<test inputfile="patient-example.xml">
			<expression>(true or true) = true</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>(true or false) = true</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>(true or {}) = true</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>(false or true) = true</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>(false or false) = false</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>(false or {}) = {}</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>({} or true) = true</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>({} or false) = {}</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>({} or {}) = {}</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testBooleanLogicXOr">
		<test inputfile="patient-example.xml">
			<expression>(true xor true) = false</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>(true xor false) = true</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>(true xor {}) = {}</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>(false xor true) = true</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>(false xor false) = false</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>(false xor {}) = {}</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>({} xor true) = {}</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>({} xor false) = {}</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>({} xor {}) = {}</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testBooleanImplies">
		<test inputfile="patient-example.xml">
			<expression>(true implies true) = true</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>(true implies false) = false</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>(true implies {}) = {}</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>(false implies true) = true</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>(false implies false) = true</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>(false implies {}) = true</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>({} implies true) = true</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>({} implies false) = true</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>({} implies {}) = true</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testPlus">
		<test inputfile="patient-example.xml">
			<expression>1 + 1 = 2</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1 + 0 = 1</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1.2 + 1.8 = 3.0</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'a'+'b' = 'ab'</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testConcatenate">
		<test inputfile="patient-example.xml">
			<expression>1 &amp; 1 = '11'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1 &amp; 'a' = '1a'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>{} &amp; 'b' = 'b'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>(1 | 2 | 3) &amp; 'b' = '1,2,3b'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>'a'&amp;'b' = 'ab'</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testMinus">
		<test inputfile="patient-example.xml">
			<expression>1 - 1 = 0</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1 - 0 = 1</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1.8 - 1.2 = 0.6</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression invalid="true">'a'-'b' = 'ab'</expression>
		</test>
	</group>
	<group name="testMultiply">
		<test inputfile="patient-example.xml">
			<expression>1 * 1 = 1</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1 * 0 = 0</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1.2 * 1.8 = 2.16</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testDivide">
		<test inputfile="patient-example.xml">
			<expression>1 / 1 = 1</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>4 / 2 = 2</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>4.0 / 2.0 = 2.0</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1 / 2 = 0.5</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>1.2 / 1.8 = 0.67</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testDiv">
		<test inputfile="patient-example.xml">
			<expression>1 div 1 = 1</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>4 div 2 = 2</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>5 div 2 = 2</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>2.2 div 1.8 = 1</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testMod">
		<test inputfile="patient-example.xml">
			<expression>1 mod 1 = 0</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>4 mod 2 = 0</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>5 mod 2 = 1</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>2.2 mod 1.8 = 0.4</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testPrecedence">
		<test inputfile="patient-example.xml">
			<expression>1+2*3+4 = 11</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testVariables">
		<test inputfile="patient-example.xml">
			<expression>%sct = 'http://snomed.info/sct'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>%loinc = 'http://loinc.org'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>%ucum = 'http://unitsofmeasure.org'</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>%"vs-administrative-gender" = 'http://hl7.org/fhir/ValueSet/administrative-gender'</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<group name="testExtension">
		<test inputfile="patient-example.xml">
			<expression>Patient.birthDate.extension('http://hl7.org/fhir/StructureDefinition/patient-birthTime').exists()</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>Patient.birthDate.extension(%"ext-patient-birthTime").exists()</expression>
			<output type="boolean">true</output>
		</test>
		<test inputfile="patient-example.xml">
			<expression>Patient.birthDate.extension('http://hl7.org/fhir/StructureDefinition/patient-birthTime1').empty()</expression>
			<output type="boolean">true</output>
		</test>
	</group>
	<!--
  <group name="testDollarResource">
		testBoolean(patient(), patient().getManagingOrganization(), "Reference", "reference.startsWith('#').not() or (reference.substring(1).trace('url') in %resource.contained.id.trace('ids'))</expression><output type="boolean">true</output></test>
		testBoolean(patient(), patient(), "Patient", "contained.select(('#'+id in %resource.descendants().reference).not()).empty()</expression><output type="boolean">true</output></test>
		<test inputfile="patient-example.xml"><expression  invalid="true">contained.select(('#'+id in %resource.descendants().reference).not()).empty()");
	</group>

<!-.-



	@Test
	public void testDecimalRA()
		RiskAssessment r = new RiskAssessment();
		SimpleQuantity sq = new SimpleQuantity();
		sq.setValue(0.2);
		sq.setUnit("%");
		sq.setCode("%");
		sq.setSystem("http://unitsofmeasure.org");
		SimpleQuantity sq1 = new SimpleQuantity();
		sq1.setValue(0.4);
		sq1.setUnit("%");
		sq1.setCode("%");
		sq1.setSystem("http://unitsofmeasure.org");
		r.addPrediction().setProbability(new Range().setLow(sq).setHigh(sq1));
		testBoolean(r, r.getPrediction().get(0).getProbability(), "RiskAssessment.prediction.probabilityRange",
		"(low.empty() or ((low.code = '%') and (low.system = %ucum))) and (high.empty() or ((high.code = '%') and (high.system = %ucum)))</expression><output type="boolean">true</output></test>
		testBoolean(r, r.getPrediction().get(0), "RiskAssessment.prediction", "probability is decimal implies probability.as(decimal) <= 100</expression><output type="boolean">true</output></test>
		r.getPrediction().get(0).setProbability(new DecimalType(80));
		testBoolean(r, r.getPrediction().get(0), "RiskAssessment.prediction", "probability.as(decimal) <= 100</expression><output type="boolean">true</output></test>
	</group>


	@Test
	<group name="testAppointment">
		testBoolean(appointment(), "(start and end) or status = 'proposed' or status = 'cancelled'</expression><output type="boolean">true</output></test>
		testBoolean(appointment(), "start.empty() xor end.exists()</expression><output type="boolean">true</output></test>
	</group>




		@Test
		public void testQuestionnaire()
		Questionnaire q = (Questionnaire) new JsonParser().parse(new FileInputStream("questionnaire-example-gcs.json"));
		for (QuestionnaireItemComponent qi : q.getItem()) {
		testQItem(qi);
		}
		}

		private void testQItem(QuestionnaireItemComponent qi)
		testBoolean(null, qi, "Questionnaire.item", "(type = 'choice' or type = 'open-choice') or (options.empty() and option.empty())</expression><output type="boolean">true</output></test>
		}

		@Test
		public void testExtensionDefinitions()
		Bundle b = (Bundle) new JsonParser().parse(new FileInputStream("extension-definitions.json"));
		for (BundleEntryComponent be : b.getEntry()) {
		testStructureDefinition((StructureDefinition) be.getResource());
		}
		}

		private void testStructureDefinition(StructureDefinition sd)
		testBoolean(sd, sd, "StructureDefinition", "snapshot.element.tail().all(path.startsWith(%resource.snapshot.element.first().path&'.')) and differential.element.tail().all(path.startsWith(%resource.differential.element.first().path&'.'))</expression><output type="boolean">true</output></test>
		}

		@Test
		public void testDoubleEntryPoint()
		<test inputfile="patient-example.xml"><expression>(Patient.name | Patient.address).count() = 3</expression><output type="boolean">true</output></test>
		}

		//
		//testParameersConstraint()
		//    Parameters p = parameters();
		//    Order o = (Order) parameters.getParameter().get(0).getResource();
		//
		//    testBoolean(o, o.getSubject(), "Reference", "reference.startsWith('#').not() or (reference.substring(1).trace('url') in %resource.contained.id.trace('ids'))</expression><output type="boolean">true</output></test>
		//  }

		@Test
		public void testCareplan() throws FileNotFoundException, IOException, FHIRException, org.hl7.fhir.exceptions.FHIRException {
		testBoolean(careplan(), "contained.select(('#'+id in %resource.descendants().reference).not()).empty()</expression><output type="boolean">false</output></test>
		testBoolean(careplanE(), "contained.select(('#'+id in %resource.descendants().reference).not()).empty()</expression><output type="boolean">false</output></test>
		}

		}

		-->
	<!--
private Patient patient() throws FHIRFormatError, FileNotFoundException, IOException {
if (patient == null)
patient = (Patient) new JsonParser().parse(new FileInputStream("patient-example.json"));
return patient;
}

private Appointment appointment() throws FHIRFormatError, FileNotFoundException, IOException {
if (appointment == null)
appointment = (Appointment) new JsonParser().parse(new FileInputStream("appointment-example-request.json"));
return appointment;
}

private Questionnaire questionnaire() throws FHIRFormatError, FileNotFoundException, IOException {
if (questionnaire == null)
questionnaire = (Questionnaire) new JsonParser().parse(new FileInputStream("questionnaire-example.json"));
return questionnaire;
}

private ValueSet valueset() throws FHIRFormatError, FileNotFoundException, IOException {
if (valueset == null)
valueset = (ValueSet) new JsonParser().parse(new FileInputStream("valueset-example-expansion.json"));
return valueset;
}

private Observation observation() throws FHIRFormatError, FileNotFoundException, IOException {
if (observation == null)
observation = (Observation) new JsonParser().parse(new FileInputStream("observation-example.json"));
return observation;
}

private Parameters parameters() throws FHIRFormatError, FileNotFoundException, IOException {
if (parameters == null)
parameters = (Parameters) new JsonParser().parse(new FileInputStream("gao/example-gao-request-parameters-CT-head.json"));
return parameters;
}

private CarePlan careplan() throws FHIRFormatError, FileNotFoundException, IOException {
if (careplan == null)
careplan = (CarePlan) new XmlParser().parse(new FileInputStream("careplan-example.xml"));
return careplan;
}

private org.hl7.fhir.dstu3.elementmodel.Element careplanE() throws FHIRFormatError, FileNotFoundException, IOException, DefinitionException, org.hl7.fhir.exceptions.FHIRException {
return new org.hl7.fhir.dstu3.elementmodel.XmlParser(TestingUtilities.context).parse(new FileInputStream("careplan-example.xml"));

  @Test
  public void testPrecedence() throws FileNotFoundException, FHIRFormatError, IOException, FHIRException {
    testBoolean(patient(), "1+2*3+4 = 11", true);
  }
  
  @Test
  public void testVariables() throws FileNotFoundException, FHIRFormatError, IOException, FHIRException {
    testBoolean(patient(), "%sct = 'http://snomed.info/sct'", true);
    testBoolean(patient(), "%loinc = 'http://loinc.org'", true);
    testBoolean(patient(), "%ucum = 'http://unitsofmeasure.org'", true);
    testBoolean(patient(), "%\"vs-administrative-gender\" = 'http://hl7.org/fhir/ValueSet/administrative-gender'", true);
  }
  
  @Test
  public void testExtension() throws FileNotFoundException, FHIRFormatError, IOException, FHIRException {
    testBoolean(patient(), "Patient.birthDate.extension('http://hl7.org/fhir/StructureDefinition/patient-birthTime').exists()", true);
    testBoolean(patient(), "Patient.birthDate.extension(%\"ext-patient-birthTime\").exists()", true);
    testBoolean(patient(), "Patient.birthDate.extension('http://hl7.org/fhir/StructureDefinition/patient-birthTime1').empty()", true);
  }
  
  @Test
  public void testDollarResource() throws FileNotFoundException, FHIRFormatError, IOException, FHIRException {
    testBoolean(patient(), patient().getManagingOrganization(), "Reference", "reference.startsWith('#').not() or (reference.substring(1).trace('url') in %resource.contained.id.trace('ids'))", true);
    testBoolean(patient(), patient(), "Patient", "contained.select(('#'+id in %resource.descendants().reference).not()).empty()", true);
    testWrong(patient(), "contained.select(('#'+id in %resource.descendants().reference).not()).empty()");
  }
  
  @Test
  public void testTyping() throws FileNotFoundException, IOException, FHIRException {
    ElementDefinition ed = new ElementDefinition();
    ed.getBinding().setValueSet(new UriType("http://test.org"));
    testBoolean(null, ed.getBinding().getValueSet(), "ElementDefinition.binding.valueSetUri", "startsWith('http:') or startsWith('https') or startsWith('urn:')", true);
  }
  
  @Test
  public void testDecimalRA() throws FileNotFoundException, IOException, FHIRException {
    RiskAssessment r = new RiskAssessment();
    SimpleQuantity sq = new SimpleQuantity();
    sq.setValue(0.2);
    sq.setUnit("%");
    sq.setCode("%");
    sq.setSystem("http://unitsofmeasure.org");
    SimpleQuantity sq1 = new SimpleQuantity();
    sq1.setValue(0.4);
    sq1.setUnit("%");
    sq1.setCode("%");
    sq1.setSystem("http://unitsofmeasure.org");
    r.addPrediction().setProbability(new Range().setLow(sq).setHigh(sq1));
    testBoolean(r, r.getPrediction().get(0).getProbability(), "RiskAssessment.prediction.probabilityRange", 
        "(low.empty() or ((low.code = '%') and (low.system = %ucum))) and (high.empty() or ((high.code = '%') and (high.system = %ucum)))", true);
    testBoolean(r, r.getPrediction().get(0), "RiskAssessment.prediction", "probability is decimal implies probability.as(decimal) <= 100", true);
    r.getPrediction().get(0).setProbability(new DecimalType(80));
    testBoolean(r, r.getPrediction().get(0), "RiskAssessment.prediction", "probability.as(decimal) <= 100", true);
  }
  
  
  @Test
  public void testAppointment() throws FileNotFoundException, IOException, FHIRException {
    testBoolean(appointment(), "(start and end) or status = 'proposed' or status = 'cancelled'", true);
    testBoolean(appointment(), "start.empty() xor end.exists()", true);
  }
  
  @Test
  public void testQuestionnaire() throws FileNotFoundException, IOException, FHIRException {
    Questionnaire q = (Questionnaire) new JsonParser().parse(new FileInputStream("C:/work/org.hl7.fhir/build/publish/questionnaire-example-gcs.json"));
    for (QuestionnaireItemComponent qi : q.getItem()) {
      testQItem(qi);
    }
  }

  private void testQItem(QuestionnaireItemComponent qi) throws FileNotFoundException, IOException, FHIRException {
    testBoolean(null, qi, "Questionnaire.item", "(type = 'choice' or type = 'open-choice') or (options.empty() and option.empty())", true);
  }
   
  @Test
  public void testExtensionDefinitions() throws FileNotFoundException, IOException, FHIRException {
    Bundle b = (Bundle) new JsonParser().parse(new FileInputStream("C:/work/org.hl7.fhir/build/publish/extension-definitions.json"));
    for (BundleEntryComponent be : b.getEntry()) {
      testStructureDefinition((StructureDefinition) be.getResource());
    }
  }

  private void testStructureDefinition(StructureDefinition sd) throws FileNotFoundException, IOException, FHIRException {
    testBoolean(sd, sd, "StructureDefinition", "snapshot.element.tail().all(path.startsWith(%resource.snapshot.element.first().path&'.')) and differential.element.tail().all(path.startsWith(%resource.differential.element.first().path&'.'))", true); 
  }

  @Test
  public void testDoubleEntryPoint() throws FileNotFoundException, IOException, FHIRException {
    testBoolean(patient(), "(Patient.name | Patient.address).count() = 3", true);
  }

//  @Test
//  public void testParameersConstraint() throws FileNotFoundException, IOException, FHIRException {
//    Parameters p = parameters();
//    Order o = (Order) parameters.getParameter().get(0).getResource();
//    
//    testBoolean(o, o.getSubject(), "Reference", "reference.startsWith('#').not() or (reference.substring(1).trace('url') in %resource.contained.id.trace('ids'))", true);
//  }

  @Test
  public void testCareplan() throws FileNotFoundException, IOException, FHIRException, org.hl7.fhir.exceptions.FHIRException {
    testBoolean(careplan(), "contained.where(('#'+id in %resource.descendants().reference).not()).empty()", true);
    testBoolean(careplan(), "contained.where(('#'+id in %resource.descendants().reference)).empty().not()", true);
    testBoolean(careplanE(), "contained.where(('#'+id in %resource.descendants().reference).not()).empty()", true);
  }

  public void testCodeSystem() throws FileNotFoundException, IOException, FHIRException, org.hl7.fhir.exceptions.FHIRException {
    testBoolean(codesystem(), "descendants().code.isDistinct()", true);
    testBoolean(codesystemE(), "descendants().code.isDistinct()", true);
  }
}
-->
</tests>
