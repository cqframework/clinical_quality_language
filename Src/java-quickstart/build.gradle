apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'antlr'

group = 'org.cqframework.example'
version = '0.1'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

mainClassName = 'org.cqframework.cql.quickstart.QuickstartCqlVisitor'
run.args = ["${projectDir}/src/test/resources/ChlamydiaScreening_CQM.cql"]

repositories {
    mavenCentral()
}

dependencies {
    antlr group: 'org.antlr', name: 'antlr4', version: '4.10.1'
    api "org.antlr:antlr4-runtime:4.10.1"
    testImplementation group: 'org.testng', name: 'testng', version: '6.8.8'
}

test {
    useTestNG()
}

sourceSets {
    main {
        antlr {
            srcDirs = ["src/main/resources"]
        }
        java {
            srcDir 'build/generated/sources/antlr/main/java'
        }
    }
}

generateGrammarSource {
    outputDirectory = file("${project.buildDir}/generated/sources/antlr/main/java/org/cqframework/cql/gen")
    arguments = ['-visitor', '-package', 'org.cqframework.cql.gen']
}
idea {
  project {
    languageLevel = JavaVersion.VERSION_11
  }
  workspace {
    iws {
      withXml { provider ->
        def props = provider.node.component.find { it.@name == 'PropertiesComponent' }

        def propMap = [
          '$PROJECT_DIR$/src/main/resources/cql.g4::/output-dir' : '$PROJECT_DIR$/src/generated/java',
          '$PROJECT_DIR$/src/main/resources/cql.g4::/lib-dir' : '$PROJECT_DIR$/src/main/resources',
          '$PROJECT_DIR$/src/main/resources/cql.g4::/package' : 'org.cqframework.cql.gen',
          '$PROJECT_DIR$/src/main/resources/cql.g4::/gen-listener' : 'true',
          '$PROJECT_DIR$/src/main/resources/cql.g4::/gen-visitor' : 'true'
        ]

        propMap.each() { key, value ->
          if (! props.property.find { it.@name == key })
            props.appendNode('property', ['name' : key, 'value' : value])
        }
      }
    }
  }
}