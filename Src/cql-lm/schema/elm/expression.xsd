<?xml version="1.0" encoding="utf-8"?>
<!-- This file is a direct copy of the CDS KAS expression.xsd with the following changes:
		namespace changed to urn:hl7-org:elm:r1
		Added the context attribute to ExpressionDef
		Added FunctionDef as an extension of ExpressionDef
		Added FunctionRef as an extension of ExpressionRef
		Added Element as an abstract base class for Expression, ExpressionDef, and ParameterDef
		Made valueType attribute of Null optional
		Added Query construct to support more direct mapping from CQL
		Added Xor operator to support more direct mapping from CQL
		Added structural type specifier support
		Added a typeSpecifier element to the List selector.
		Added YearOf, MonthOf, DayOf, etc. to replace DatePart
		Added Width operator to replace Length(interval)
		Added YearsBetween, MonthsBetween, etc. to replace DateDiff
		Added SameAs operators to support precision-based timing
		Added MeetsBefore/MeetsAfter and BegunBy/EndedBy

The following changes were made since the initial informative ballot in September 2014:
		Moved annotations from Expression to the new Element
		Added ForEach and Define clauses to the Query construct
		Renamed PropertyTypeSpecifier to TupleElementDefinition
		Renamed ObjectTypeSpecifier to TupleTypeSpecifier
		Made parameterType optional in the ParameterDef
		Removed the ComplexLiteral type
		Renamed PropertyExpression to TupleElement
		Renamed ObjectExpression to Tuple
		Removed ObjectDescriptor type
		Removed ObjectRedefine type
		Renamed begin/end to low/high and beginOpen/endOpen to lowClosed/highClosed in the Interval type
		Removed the key attribute from the List type
		Renamed the Condition type to If
		Renamed DateGranularity to DateTimePrecision
		Removed the DateAdd/DateDiff/DatePart types
		Made month and day attributes optional in the Date type and added the timezone attribute
		Renamed Difference to Except
		Renamed IsNotEmpty to Exists
		Removed IsEmpty type
		Removed BegunBy and EndedBy types
		Renamed Begin/Begins to Start/Starts
		And/Or and Union are now BinaryExpressions, rather than NaryExpressions
		Added QueryDefineRef for referencing query Define clauses
		Added IdentifierRef type
		Added SingletonFrom type
		Renamed DateOf,TimeOf,YearOf,etc to DateFrom,TimeFrom,YearFrom,etc.
		Collapsed YearFrom,MonthFrom,DayFrom,etc. to a single DateTimeComponentFrom operator
		Collapsed YearsBetween,MonthsBetween,etc. to a single DurationBetween operator
		Added precision attribute to the SameAs operator.
		Added SameOrBefore/SameOrAfter operators
		Removed SameYearAs,SameMonthAs,etc (replaced by precision attribute in SameAs operator)
-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="urn:hl7-org:elm:r1" xmlns:sch="http://purl.oclc.org/dsdl/schematron" targetNamespace="urn:hl7-org:elm:r1" elementFormDefault="qualified">
	<xs:annotation>
		<xs:documentation>This file defines the core expression components used throughout artifacts based on the Expression Logical Model. The core expression components defined here are intended to be general purpose, and do not reference anything specific to the clinical quality domain. This layering is intended to isolate the conceptual elements of a general purpose expression language from the clinically-focused operations relevant to the clinical quality domain.</xs:documentation>
	</xs:annotation>
	<xs:complexType name="Element" abstract="true">
		<xs:annotation>
			<xs:documentation>The Element type defines the abstract base type for all library elements in ELM.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="annotation" type="xs:anyType" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>The annotation element provides a mechanism for decorating expressions with application-specific information such as translation hints, visual designer information, or debug symbols.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="localId" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="TypeSpecifier" abstract="true">
		<xs:annotation>
			<xs:documentation>TypeSpecifier is the abstract base type for all type specifiers.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Element"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="NamedTypeSpecifier">
		<xs:annotation>
			<xs:documentation>NamedTypeSpecifier defines a type identified by a name, such as Integer, String, Patient, or Encounter.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="TypeSpecifier">
				<xs:attribute name="name" type="xs:QName" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="IntervalTypeSpecifier">
		<xs:annotation>
			<xs:documentation>IntervalTypeSpecifier defines an interval type by specifying the point type. Any type can serve as the point type for an interval, so long as it supports comparison operators, minimum and maximum value determination, as well as predecessor and successor functions.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="TypeSpecifier">
				<xs:sequence>
					<xs:element name="pointType" type="TypeSpecifier" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ListTypeSpecifier">
		<xs:annotation>
			<xs:documentation>ListTypeSpecifier defines a list type by specifying the type of elements the list may contain.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="TypeSpecifier">
				<xs:sequence>
					<xs:element name="elementType" type="TypeSpecifier" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TupleElementDefinition">
		<xs:annotation>
			<xs:documentation>TupleElementDefinition defines the name and type of a single element within a TupleTypeSpecifier.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Element">
				<xs:sequence>
					<xs:element name="type" type="TypeSpecifier" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
				<xs:attribute name="name" type="xs:string" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TupleTypeSpecifier">
		<xs:annotation>
			<xs:documentation>TupleTypeSpecifier defines the possible elements of a tuple.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="TypeSpecifier">
				<xs:sequence>
					<xs:element name="element" type="TupleElementDefinition" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Expression" abstract="true">
		<xs:annotation>
			<xs:documentation>The Expression type defines the abstract base type for all expressions used in the ELM expression language.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Element"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="UnaryExpression" abstract="true">
		<xs:annotation>
			<xs:documentation>The UnaryExpression type defines the abstract base type for expressions that take a single argument.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="operand" type="Expression" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="BinaryExpression">
		<xs:annotation>
			<xs:documentation>The BinaryExpression type defines the abstract base type for expressions that take two arguments.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="operand" type="Expression" minOccurs="2" maxOccurs="2"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TernaryExpression">
		<xs:annotation>
			<xs:documentation>The TernaryExpression type defines the abstract base type for expressions that take three arguments.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="operand" type="Expression" minOccurs="3" maxOccurs="3"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="NaryExpression" abstract="true">
		<xs:annotation>
			<xs:documentation>The NaryExpression type defines an abstract base class for an expression that takes any number of arguments, including zero.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="operand" type="Expression" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ExpressionDef">
		<xs:annotation>
			<xs:documentation>The ExpressionDef type defines an expression and an associated name that can be referenced by any expression in the artifact. The name must be unique within the artifact.
			The context attribute specifies the scope of the execution and is used by the environment to determine when and how to evaluate the expression.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Element">
				<xs:sequence>
					<xs:element name="expression" type="Expression"/>
				</xs:sequence>
				<xs:attribute name="name" type="xs:string"/>
				<xs:attribute name="context" type="xs:string" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="FunctionDef">
		<xs:annotation>
			<xs:documentation>The FunctionDef type defines a named function that can be invoked by any expression in the artifact. Function names must be unique within the artifact. Functions may take any number of parameters.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ExpressionDef">
				<xs:sequence>
					<xs:element name="parameter" type="ParameterDef" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ExpressionRef">
		<xs:annotation>
			<xs:documentation>The ExpressionRef type defines an expression that references a previously defined NamedExpression. The result of evaluating an ExpressionReference is the result of evaluating the referenced NamedExpression.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="name" type="xs:string"/>
				<xs:attribute name="libraryName" type="xs:string" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="FunctionRef">
		<xs:annotation>
			<xs:documentation>The FunctionRef type defines an expression that invokes a previously defined function. The result of evaluating each operand is passed to the function.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ExpressionRef">
				<xs:sequence>
					<xs:element name="operand" type="Expression" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ParameterDef">
		<xs:annotation>
			<xs:documentation>The ParameterDef type defines a parameter that can be referenced by name anywhere within an expression. Parameters are defined at the artifact level, and may be provided as part of the payload for an evaluation request. If no parameter value is provided, the default element is used to provide the value for the parameter. If no parameter or default is provided, the parameter is defined to be null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Element">
				<xs:sequence>
					<xs:element name="default" type="Expression" minOccurs="0" maxOccurs="1"/>
					<xs:element name="parameterTypeSpecifier" type="TypeSpecifier" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
				<xs:attribute name="name" type="xs:string"/>
				<xs:attribute name="parameterType" type="xs:QName" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ParameterRef">
		<xs:annotation>
			<xs:documentation>The ParameterRef expression allows the value of a parameter to be referenced as part of an expression.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="name" type="xs:string"/>
				<xs:attribute name="libraryName" type="xs:string" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="IdentifierRef">
		<xs:annotation>
			<xs:documentation>The IdentifierRef type defines an expression that references an unresolved identifier. An unresolved identifier reference generally indicates an error condition. The implementation is free to attempt to resolve the identifier, but is also justified in throwing an error at compile-time when an identifier ref is encountered.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="name" type="xs:string"/>
				<xs:attribute name="libraryName" type="xs:string" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- Literals -->
	<xs:complexType name="Literal">
		<xs:annotation>
			<xs:documentation>The Literal type defines a single scalar value. For example, the literal 5, the boolean value true or the string "antithrombotic".</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="valueType" type="xs:QName" use="required"/>
				<xs:attribute name="value" type="xs:anySimpleType" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TupleElement">
		<xs:annotation>
			<xs:documentation>The TupleElement is used within the Tuple to provide the value of a specific element within a tuple literal expression.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="value" type="Expression" minOccurs="1" maxOccurs="1"/>
		</xs:sequence>
		<xs:attribute name="name" type="xs:string" use="required"/>
	</xs:complexType>
	<xs:complexType name="Tuple">
		<xs:annotation>
			<xs:documentation>The TupleSelector allows tuples of any type to be built up as an expression. The tupleType attribute specifies the type of the tuple being built, if any, and the list of tuple elements specify the values for the elements of the tuple. Note that the value of an element may be any expression, including another TupleSelector.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="element" type="TupleElement" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
				<xs:attribute name="tupleType" type="xs:QName"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- Interval selector -->
	<xs:complexType name="Interval">
		<xs:annotation>
			<xs:documentation>The Interval selector defines an interval value. An interval must be defined using a point type that supports comparison, as well as Successor and Predecessor operations, and Minimum and Maximum Value operations.
			
The low and high bounds of the interval may each be defined as open or closed. Following standard terminology usage in interval mathematics, an open interval is defined to exclude the specified point, whereas a closed interval includes the point. The default is closed, indicating an inclusive interval.

The low and high elements are both optional. If the low element is not specified, the low bound of the resulting interval is null. If the high element is not specified, the high bound of the resulting interval is null.

The static type of the low bound determines the type of the interval, and the high bound must be of the same type.

If the low bound of the interval is null and open, the low bound of the interval is interpreted as unknown, and computations involving the low boundary will result in null.

If the low bound of the interval is null and closed, the interval is interpreted to start at the minimum value of the point type, and computations involving the low boundary will be performed with that value.

If the high bound of the interval is null and open, the high bound of the interval is unknown, and computations involving the high boundary will result in null. 

If the high bound of the interval is null and closed, the interval is interpreted to end at the maximum value of the point type, and computations involving the high boundary will be performed with that interpretation.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="low" type="Expression" minOccurs="0" maxOccurs="1"/>
					<xs:element name="high" type="Expression" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
				<xs:attribute name="lowClosed" type="xs:boolean" use="optional" default="true"/>
				<xs:attribute name="highClosed" type="xs:boolean" use="optional" default="true"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="List">
		<xs:annotation>
			<xs:documentation>The List selector returns a value of type List, whose elements are the result of evaluating the arguments to the List selector, in order. 
			
If a typeSpecifier element is provided, the list is of that type. Otherwise, the static type of the first argument determines the type of the resulting list, and each subsequent argument must be of that same type.
			
If any argument is null, the resulting list will have null for that element.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="typeSpecifier" type="TypeSpecifier" minOccurs="0" maxOccurs="1"/>
					<xs:element name="element" type="Expression" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- Logical Operators -->
	<xs:complexType name="And">
		<xs:annotation>
			<xs:documentation>The And operator returns the logical conjunction of its arguments. Note that this operator is defined using 3-valued logic semantics. This means that if either argument is false, the result is false; if both arguments are true, the result is true; otherwise, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Or">
		<xs:annotation>
			<xs:documentation>The Or operator returns the logical disjunction of its arguments. Note that this operator is defined using 3-valued logic semantics. This means that if either argument is true, the result is true; if both arguments are false, the result is false; otherwise, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Xor">
		<xs:annotation>
			<xs:documentation>The Xor operator returns the exclusive or of its arguments. Note that this operator is defined using 3-valued logic semantics. This means that the result is true if and only if one argument is true and the other is false, and that the result is false if and only if both arguments are true or both arguments are false. If either or both arguments are null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Not">
		<xs:annotation>
			<xs:documentation>The Not operator returns the logical negation of its argument. If the argument is true, the result is false; if the argument is false, the result is true; otherwise, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="If">
		<xs:annotation>
			<xs:documentation>The If operator evaluates a condition, and returns the then argument if the condition evaluates to true; otherwise the result of the else argument is returned. The static type of the then argument determines the result type of the conditional, and the else argument must be of that same type.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="condition" type="Expression" minOccurs="1" maxOccurs="1"/>
					<xs:element name="then" type="Expression" minOccurs="1" maxOccurs="1"/>
					<xs:element name="else" type="Expression" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="CaseItem">
		<xs:complexContent>
			<xs:extension base="Element">
				<xs:sequence>
					<xs:element name="when" type="Expression" minOccurs="1" maxOccurs="1"/>
					<xs:element name="then" type="Expression" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Case">
		<xs:annotation>
			<xs:documentation>The Case operator allows for multiple conditional expressions to be chained together in a single expression, rather than having to nest multiple If operators. In addition, the comparand operand provides a variant on the case that allows a single value to be compared in each conditional.
			
If a comparand is not provided, the type of each when element of the caseItems within the Case is expected to be boolean. If a comparand is provided, the type of each when element of the caseItems within the Case is expected to be of the same type as the comparand. An else element must always be provided.

The static type of the then argument within the first caseItem determines the type of the result, and the then argument of each subsequent caseItem and the else argument must be of that same type.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="comparand" type="Expression" minOccurs="0" maxOccurs="1"/>
					<xs:element name="caseItem" type="CaseItem" minOccurs="1" maxOccurs="unbounded"/>
					<xs:element name="else" type="Expression" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- Nullological Operators -->
	<!-- NOTE: Maybe may be implemented as a null-test on a boolean-valued expression. I am reluctant to introduce an actual Maybe operator
	because SQL doesn't have a MAYBE operator. (At least, most dialects don't). In fact, even the long-hand described previously (null-test
	on a boolean-valued expression) cannot be translated into an SQL dialect that does not have a MAYBE operator.
	-->
	<xs:complexType name="Null">
		<xs:annotation>
			<xs:documentation>The Null operator returns a null, or missing information marker. To avoid the need to cast this result, the operator is allowed to return a typed null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="valueType" type="xs:QName" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="IsNull">
		<xs:annotation>
			<xs:documentation>The IsNull operator determines whether or not its argument evaluates to null. If the argument evaluates to null, the result is true; otherwise, the result is false.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="IfNull">
		<xs:annotation>
			<xs:documentation>The IfNull operator replaces a null with the result of a given expression. If the first argument evaluates to null, the operator returns the result of the second argument. Otherwise, the operator returns the result of the first argument. The static type of the first argument determines the type of the result, and the second argument must be of that same type.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Coalesce">
		<xs:annotation>
			<xs:documentation>The Coalesce operator returns the first non-null result in a list of arguments. If all arguments evaluate to null, the result is null. The static type of the first argument determines the type of the result, and all subsequent arguments must be of that same type.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="NaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<!-- Type Operators -->
	<xs:complexType name="Is">
		<xs:annotation>
			<xs:documentation>The Is operator allows the type of a result to be tested. The language must support the ability to test against any type. If the run-time type of the argument is of the type being tested, the result of the operator is true; otherwise, the result is false.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnaryExpression">
				<xs:sequence>
					<xs:element name="isTypeSpecifier" type="TypeSpecifier" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
				<xs:attribute name="isType" type="xs:QName" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="As">
		<xs:annotation>
			<xs:documentation>The As operator allows the result of an expression to be cast as a given target type. This allows expressions to be written that are statically typed against the expected run-time type of the argument. If the argument is not of the specified type, and the strict attribute is false (the default), the result is null. If the argument is not of the specified type and the strict attribute is true, an exception is thrown.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnaryExpression">
				<xs:sequence>
					<xs:element name="asTypeSpecifier" type="TypeSpecifier" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
				<xs:attribute name="asType" type="xs:QName" use="optional"/>
				<xs:attribute name="strict" type="xs:boolean" use="optional" default="false"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Convert">
		<xs:annotation>
			<xs:documentation>The Convert operator converts a value to a specific type. The result of the operator is the value of the argument converted to the target type, if possible. Note that use of this operator may result in a run-time exception being thrown if there is no valid conversion from the actual value to the target type.

This operator supports conversion between String and each of Boolean, Integer, Real, and DateTime, as well as conversion from Integer to Real.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnaryExpression">
				<xs:attribute name="toType" type="xs:QName" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- Comparison Operators -->
	<xs:complexType name="Equal">
		<xs:annotation>
			<xs:documentation>The Equal operator returns true if the arguments are equal; and false otherwise. Equality semantics are defined to be value-based.

For simple types, this means that equality returns true if and only if the result of each argument evaluates to the same value.

For tuple types, this means that equality returns true if and only if the tuples are of the same type, and the values for all elements by name are equal.

For list types, this means that equality returns true if and only if the lists contain elements of the same type, have the same number of elements, and for each element in the lists, in order, the elements are equal using the same semantics.

For interval types, equality returns true if and only if the intervals are over the same point type, and they have the same value for the starting and ending points of the interval as determined by the Start and End operators.

If either argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="NotEqual">
		<xs:annotation>
			<xs:documentation>The NotEqual operator returns true if its arguments are not the same value.

The NotEqual operator is a shorthand for invocation of logical negation of the Equal operator.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Less">
		<xs:annotation>
			<xs:documentation>The Less operator returns true if the first argument is less than the second argument.
			
If either argument is null, the result is null.

The Less operator is defined for the Integer, Real, String, DateTime, and Quantity types.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Greater">
		<xs:annotation>
			<xs:documentation>The Greater operator returns true if the first argument is greater than the second argument.

If either argument is null, the result is null.

The Greater operator is defined for the Integer, Real, String, DateTime, and Quantity types.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="LessOrEqual">
		<xs:annotation>
			<xs:documentation>The LessOrEqual operator returns true if the first argument is less than or equal to the second argument.

If either argument is null, the result is null.

The LessOrEqual operator is defined for the Integer, Real, String, DateTime, and Quantity types.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="GreaterOrEqual">
		<xs:annotation>
			<xs:documentation>The GreaterOrEqual operator returns true if the first argument is greater than or equal to the second argument.

If either argument is null, the result is null.

The GreaterOrEqual operator is defined for the Integer, Real, String, DateTime, and Quantity types.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<!-- Arithmetic Operators -->
	<xs:complexType name="Add">
		<xs:annotation>
			<xs:documentation>The Add operator performs numeric addition of its arguments.
			
If either argument is null, the result is null.

The Add operator is defined for the Integer, Real, and Quantity types. In addition, a time-valued Quantity can be added to a DateTime using this operator.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Subtract">
		<xs:annotation>
			<xs:documentation>The Subtract operator performs numeric subtraction of its arguments.

If either argument is null, the result is null.

The Subtract operator is defined for the Integer, Real, and Quantity types. In addition, a time-valued Quantity can be subtracted from a DateTime using this operator.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Multiply">
		<xs:annotation>
			<xs:documentation>The Multiply operator performs numeric multiplication of its arguments.

If either argument is null, the result is null.

The Multiply operator is defined for the Integer, Real and Quantity types.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Divide">
		<xs:annotation>
			<xs:documentation>The Divide operator performs numeric division of its arguments. Note that the result type of Divide is Real, even if its arguments are of type Integer.

If either argument is null, the result is null.

The Divide operator is defined for the Integer, Real and Quantity types.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TruncatedDivide">
		<xs:annotation>
			<xs:documentation>The TruncatedDivide operator performs integer division of its arguments.

If either argument is null, the result is null.

The TruncatedDivide operator is defined for the Integer, Real and Quantity types.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Modulo">
		<xs:annotation>
			<xs:documentation>The Modulo operator computes the remainder of the division of its arguments.

If either argument is null, the result is null.

The Modulo operator is defined for the Integer, Real, and Quantity types.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Ceiling">
		<xs:annotation>
			<xs:documentation>The Ceiling operator returns the first integer greater than or equal to the argument. 

If the argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Floor">
		<xs:annotation>
			<xs:documentation>The Floor operator returns the first integer less than or equal to the argument.

If the argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Truncate">
		<xs:annotation>
			<xs:documentation>The Truncate operator returns the integer component of its argument.

If the argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Abs">
		<xs:annotation>
			<xs:documentation>The Abs operator returns the absolute value of its argument.

If the argument is null, the result is null.

The Abs operator is defined for the Integer and Real types.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Negate">
		<xs:annotation>
			<xs:documentation>The Negate operator returns the negative of its argument.

If the argument is null, the result is null.

The Negate operator is defined for the Integer, Real, and Quantity types.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Round">
		<xs:annotation>
			<xs:documentation>The Round operator returns the nearest integer to its argument. The semantics of round are defined as a traditional round, meaning that a decimal value of 0.5 or higher will round to 1.

If the argument is null, the result is null.

Precision determines the decimal place at which the rounding will occur. If precision is not specified or null, 0 is assumed.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="operand" type="Expression" minOccurs="1" maxOccurs="1"/>
					<xs:element name="precision" type="Expression" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Ln">
		<xs:annotation>
			<xs:documentation>The Ln operator computes the natural logarithm of its argument.

If the argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Log">
		<xs:annotation>
			<xs:documentation>The Log operator computes the logarithm of its first argument, using the second argument as the base.

If either argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Power">
		<xs:annotation>
			<xs:documentation>The Power operator raises the first argument to the power given by the second argument.

If either argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Successor">
		<xs:annotation>
			<xs:documentation>The Successor operator returns the successor of the argument. For example, the successor of 1 is 2. If the argument is already the maximum value for the type, a run-time error is thrown.
			
The Successor operator is defined for the Integer, Real, and DateTime types.

For Integer, Successor is equivalent to adding 1.

For Real, Successor is equivalent to adding the minimum precision value for the Real type, or 10^-08.

For DateTime values, Successor is equivalent to adding a time-unit quantity for the lowest specified precision of the DateTime value. For example, if the DateTime is fully specified, Successor is equivalent to adding 1 millisecond; if the DateTime is specified to the second, Successor is equivalent to adding one second, etc.

If the argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Predecessor">
		<xs:annotation>
			<xs:documentation>The Predecessor operator returns the predecessor of the argument. For example, the predecessor of 2 is 1. If the argument is already the minimum value for the type, a run-time error is thrown.
			
The Predecessor operator is defined for the Integer, Real, and DateTime types.

For Integer, Predecessor is equivalent to subtracting 1.

For Real, Predecessor is equivalent to subtracting the minimum precision value for the Real type, or 10^-08.

For DateTime values, Predecessor is equivalent to subtracting a time-unit quantity for the lowest specified precision of the DateTime value. For example, if the DateTime is fully specified, Predecessor is equivalent to subtracting 1 millisecond; if the DateTime is specified to the second, Predecessor is equivalent to subtracting one second, etc.

If the argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="MinValue">
		<xs:annotation>
			<xs:documentation>The MinValue operator returns the minimum representable value for the given type.

The MinValue operator is defined for the Integer, Real, and DateTime types.

For Integer, MinValue returns the minimum signed 32-bit integer, -(2^31).

For Real, MinValue returns the minimum representable Real value, (-10^37 - 1) / 10^8 (-9999999999999999999999999999.99999999).

For DateTime, MinValue returns the minimum representable DateTime value, DateTime(1900, 1, 1, 0, 0, 0, 0).</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="valueType" type="xs:QName" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="MaxValue">
		<xs:annotation>
			<xs:documentation>The MaxValue operator returns the maximum representable value for the given type.
			
The MaxValue operator is defined for the Integer, Real, and DateTime types.

For Integer, MaxValue returns the maximum signed 32-bit integer, 2^31 - 1.

For Real, MaxValue returns the maximum representable Real value, (10^37 - 1) / 10^8 (9999999999999999999999999999.99999999).

For DateTime, MaxValue returns the maximum representable DateTime value, DateTime(9999, 12, 31, 23, 59, 59, 999).</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="valueType" type="xs:QName" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- String Operators -->
	<xs:complexType name="Concat">
		<xs:annotation>
			<xs:documentation>The Concat operator performs string concatenation of its arguments.

If any argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="NaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Combine">
		<xs:annotation>
			<xs:documentation>The Combine operator combines a list of strings, optionally separating each string with the given separator.

If either argument is null, or any element in the source list of strings is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="source" type="Expression" minOccurs="1" maxOccurs="1"/>
					<xs:element name="separator" type="Expression" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Split">
		<xs:annotation>
			<xs:documentation>The Split operator splits a string into a list of strings using a separator.

If the stringToSplit argument is null, the result is null.

If the stringToSplit argument does not contain any appearances of the separator, the result is a list of strings containing one element that is the value of the stringToSplit argument.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="stringToSplit" type="Expression" minOccurs="1" maxOccurs="1"/>
					<xs:element name="separator" type="Expression" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Length">
		<xs:annotation>
			<xs:documentation>The Length operator returns the length of its argument.
			
For strings, the length is the number of characters in the string.

For lists, the length is the number of elements in the list.

If the argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Upper">
		<xs:annotation>
			<xs:documentation>The Upper operator returns the upper case of its argument.

If the argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Lower">
		<xs:annotation>
			<xs:documentation>The Lower operator returns the lower case of its argument.

If the argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Indexer">
		<xs:annotation>
			<xs:documentation>The Indexer operator returns the indexth element in a string or list.
			
Indexes in strings and lists are defined to be 1-based.

If either argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="operand" type="Expression" minOccurs="1" maxOccurs="1"/>
					<xs:element name="index" type="Expression" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Pos">
		<xs:annotation>
			<xs:documentation>The Pos operator returns the 1-based index of the given pattern in the given string.
			
If the pattern is not found, the result is 0.

If either argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="pattern" type="Expression" minOccurs="1" maxOccurs="1"/>
					<xs:element name="string" type="Expression" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Substring">
		<xs:annotation>
			<xs:documentation>The Substring operator returns the string within stringToSub, starting at the 1-based index startIndex, and consisting of length characters.
			
If length is ommitted, the substring returned starts at startIndex and continues to the end of stringToSub.

If stringToSub or startIndex is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="stringToSub" minOccurs="1" maxOccurs="1"/>
					<xs:element name="startIndex" minOccurs="1" maxOccurs="1"/>
					<xs:element name="length" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- TODO: Trimming, Padding, Replicating, Insert, IsDigit, IsLetter, IsWhitespace? 
	These operators are not primitive, but they are very useful shorthands. Do we want to leave them out for now? (CREF doesn't actually have any of these, and hasn't needed them so far...)
	-->
	<!-- Temporal Operators -->
	<xs:simpleType name="DateTimePrecision">
		<xs:annotation>
			<xs:documentation>The DateTimePrecision type specifies the units of precision available for temporal operations such as DurationBetween, SameAs, SameOrBefore, SameOrAfter, and DateTimeComponentFrom.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="Year"/>
			<xs:enumeration value="Month"/>
			<xs:enumeration value="Week"/>
			<xs:enumeration value="Day"/>
			<xs:enumeration value="Hour"/>
			<xs:enumeration value="Minute"/>
			<xs:enumeration value="Second"/>
			<xs:enumeration value="Millisecond"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="DurationBetween">
		<xs:annotation>
			<xs:documentation>The DurationBetween operator returns the number of boundaries crossed for the specified precision between the first and second arguments. If the first argument is after the second argument, the result is negative. 
			
If either argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression">
				<xs:attribute name="precision" type="DateTimePrecision"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="DateFrom">
		<xs:annotation>
			<xs:documentation>The DateFrom operator returns the date (with no time components specified) of the argument. 

If the argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TimeFrom">
		<xs:annotation>
			<xs:documentation>The TimeFrom operator returns the time (with the date components set to the minimum date of January 1st, 1900) of the argument.

If the argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TimezoneFrom">
		<xs:annotation>
			<xs:documentation>The TimezoneFrom operator returns the timezone of the argument.

If the argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="DateTimeComponentFrom">
		<xs:annotation>
			<xs:documentation>The DateTimeComponentFrom operator returns the specified component of the argument.
			
If the argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnaryExpression">
				<xs:attribute name="precision" type="DateTimePrecision"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Today">
		<xs:annotation>
			<xs:documentation>The Today operator returns the date (with no time component) of the start timestamp associated with the evaluation request. See the Now operator for more information on the rationale for defining the Today operator in this way.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Now">
		<xs:annotation>
			<xs:documentation>The Now operator returns the date and time of the start timestamp associated with the evaluation request. Now is defined in this way for two reasons:
1) The operation will always return the same value within any given evaluation, ensuring that the result of an expression containing Now will always return the same result.

2) The operation will return the timestamp associated with the evaluation request, allowing the evaluation to be performed with the same timezone information as the data delivered with the evaluation request.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="DateTime">
		<xs:annotation>
			<xs:documentation>The DateTime operator constructs a date/time value from the given components.
			
At least one component other than timezoneOffset must be specified, and no component may be specified at a precision below an unspecified precision. For example, hour may be null, but if it is, minute, second, and millisecond must all be null as well.

If timezoneOffset is not specified, it is defaulted to the timezone offset of the evaluation request.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="year" type="Expression" minOccurs="1" maxOccurs="1"/>
					<xs:element name="month" type="Expression" minOccurs="0" maxOccurs="1"/>
					<xs:element name="day" type="Expression" minOccurs="0" maxOccurs="1"/>
					<xs:element name="hour" type="Expression" minOccurs="0" maxOccurs="1"/>
					<xs:element name="minute" type="Expression" minOccurs="0" maxOccurs="1"/>
					<xs:element name="second" type="Expression" minOccurs="0" maxOccurs="1"/>
					<xs:element name="millisecond" type="Expression" minOccurs="0" maxOccurs="1"/>
					<xs:element name="timezoneOffset" type="Expression" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SameAs">
		<xs:annotation>
			<xs:documentation>The SameAs operator compares two date/time values to the specified precision for equality. Individual component values are compared starting from the year component down to the specified precision. If all values are specified and have the same value for each component, then the result is true. If a compared component is specified in both dates, but the values are not the same, then the result is false. Otherwise the result is null, as there is not enough information to make a determination. If either or both arguments are null, the result is null.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression">
				<xs:attribute name="precision" type="DateTimePrecision" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SameOrBefore">
		<xs:annotation>
			<xs:documentation>The SameOrBefore operator compares two date/time values to the specified precision to determine whether the first argument is the same or before the second argument. If either or both arguments are null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression">
				<xs:attribute name="precision" type="DateTimePrecision" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SameOrAfter">
		<xs:annotation>
			<xs:documentation>The SameOrAfter operator compares two date/time values to the specified precision to determine whether the first argument is the same or after the second argument. If either or both arguments are null, the result is null.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression">
				<xs:attribute name="precision" type="DateTimePrecision" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- Interval Operators -->
	<!-- Equal (already defined) -->
	<!-- NotEqual (already defined) -->
	<xs:complexType name="Width">
		<xs:annotation>
			<xs:documentation>The Width operator returns the width of an interval. The result of this operator is equivalent to invoking: End(i) - Start(i).

If the argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnaryExpression"/>
		</xs:complexContent>
		<!-- Width(i) = End(i) - Start(i) -->
	</xs:complexType>
	<xs:complexType name="Start">
		<xs:annotation>
			<xs:documentation>The Start operator returns the starting point of an interval. 
			
If the low boundary of the interval is open, this operator returns the Successor of the low value of the interval. Note that if the low value of the interval is null, the result is null.

If the low boundary of the interval is closed and the low value of the interval is not null, this operator returns the low value of the interval. Otherwise, the result is the minimum value of the point type of the interval.

If the argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnaryExpression"/>
		</xs:complexContent>
		<!-- Start(i) = if i.lowClosed then IfNull(i.low, T.MinimumValue()) else Succ(i.low) -->
	</xs:complexType>
	<xs:complexType name="End">
		<xs:annotation>
			<xs:documentation>The End operator returns the ending point of an interval.
			
If the high boundary of the interval is open, this operator returns the Predecessor of the high value of the interval. Note that if the high value of the interval is null, the result is null.

If the high boundary of the interval is closed and the high value of the interval is not null, this operator returns the high value of the interval. Otherwise, the result is the maximum value of the point type of the interval.

If the argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnaryExpression"/>
		</xs:complexContent>
		<!-- End(i) = if highClosed then IfNull(i.high, T.MaximumValue()) else Predecessor(i.high) -->
	</xs:complexType>
	<xs:complexType name="Contains">
		<xs:annotation>
			<xs:documentation>The Contains operator returns true if the first operand contains the second.
			
There are two overloads of this operator:
	List, T : The type of T must be the same as the element type of the list.
	Interval, T : The type of T must be the same as the point type of the interval.
	
For the List, T overload, this operator returns true if the given element is in the list.

For the Interval, T overload, this operator returns true if the given point is greater than or equal to the starting point of the interval, and less than or equal to the ending point of the interval. For open interval boundaries, exclusive comparison operators are used. For closed interval boundaries, if the interval boundary is null, the result of the boundary comparison is considered true.

If either argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression">
				<xs:attribute name="precision" type="DateTimePrecision" use="optional"/>
			</xs:extension>
		</xs:complexContent>
		<!-- Contains(i, p) = (if lowClosed then p >= IsNull(i.low, p) else p > i.low) and (if highClosed then p <= IsNull(i.high, p) else p < i.high) -->
	</xs:complexType>
	<xs:complexType name="In">
		<xs:annotation>
			<xs:documentation>The In operator tests for membership in an interval or list.
			
There are two overloads of this operator:
	T, List : The type of T must be the same as the element type of the list.
	T, Interval : The type of T must be the same as the point type of the interval.
	
For the T, List overload, this operator returns true if the given element is in the given list.

For the T, Interval overload, this operator returns true if the given point is greater than or equal to the starting point of the interval, and less than or equal to the ending point of the interval. For open interval boundaries, exclusive comparison operators are used. For closed interval boundaries, if the interval boundary is null, the result of the boundary comparison is considered true.

If either argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression">
				<xs:attribute name="precision" type="DateTimePrecision" use="optional"/>
			</xs:extension>
		</xs:complexContent>
		<!-- In(p, i) = (if lowClosed then p >= IsNull(i.low, p) else p > i.low) and (if highClosed then p <= IsNull(i.high, p) else p < i.high) -->
	</xs:complexType>
	<xs:complexType name="Includes">
		<xs:annotation>
			<xs:documentation>The Includes operator returns true if the first operand completely includes the second.
			
There are two overloads of this operator:
	List, List : The element type of both lists must be the same.
	Interval, Interval : The point type of both intervals must be the same.

For the List, List overload, this operator returns true if the first operand includes every element of the second operand.

For the Interval, Interval overload, this operator returns true if starting point of the first interval is less than or equal to the starting point of the second interval, and the ending point of the first interval is greater than or equal to the ending point of the second interval.

This operator uses the semantics described in the Start and End operators to determine interval boundaries.

If either argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression">
				<xs:attribute name="precision" type="DateTimePrecision" use="optional"/>
			</xs:extension>
		</xs:complexContent>
		<!-- Includes(i1, i2) = Start(i1) <= Start(i2) and End(i1) >= End(i2) -->
	</xs:complexType>
	<xs:complexType name="IncludedIn">
		<xs:annotation>
			<xs:documentation>The IncludedIn operator returns true if the first operand is completely included in the second.

There are two overloads of this operator:
	List, List : The element type of both lists must be the same.
	Interval, Interval : The point type of both intervals must be the same.
	
For the List, List overload, this operator returns true if every element in the first list is included in the second list.

For the Interval, Interval overload, this operator returns true if the starting point of the first interval is greater than or equal to the starting point of the second interval, and the ending point of the first interval is less than or equal to the ending point of the second interval.

This operator uses the semantics described in the Start and End operators to determine interval boundaries.

If either argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression">
				<xs:attribute name="precision" type="DateTimePrecision" use="optional"/>
			</xs:extension>
		</xs:complexContent>
		<!-- IncludedIn(i1, i2) = Start(i1) >= Start(i2) and End(i1) <= End(i2) -->
	</xs:complexType>
	<xs:complexType name="ProperIncludes">
		<xs:annotation>
			<xs:documentation>The ProperIncludes operator returns true if the first operand includes the second, and is strictly larger.
			
There are two overloads of this operator:
	List, List : The element type of both lists must be the same.
	Interval, Interval : The point type of both intervals must be the same.
	
For the List, List overload, this operator returns true if the first list includes every element of the second list, and first list is strictly larger.

For the Interval, Interval overload, this operator returns true if the first interval includes the second interval, and the intervals are not equal.

This operator uses the semantics described in the Start and End operators to determine interval boundaries.

If either argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression">
				<xs:attribute name="precision" type="DateTimePrecision" use="optional"/>
			</xs:extension>
		</xs:complexContent>
		<!-- ProperIncludes(i1, i2) = Includes(i1, i2) and i1 <> i2 -->
	</xs:complexType>
	<xs:complexType name="ProperIncludedIn">
		<xs:annotation>
			<xs:documentation>The ProperIncludedIn operator returns true if the first operand is included in the second, and is strictly smaller.
			
There are two overloads of this operator:
	List, List : The element type of both lists must be the same.
	Interval, Interval : The point type of both intervals must be the same.

For the List, List overload, this operator returns true if every element of the first list is included in the second list, and the first list is strictly smaller.

For the Interval, Interval overload, this operator returns true if the first interval is included in the second interval, and the intervals are not equal.

This operator uses the semantics described in the Start and End operators to determine interval boundaries.

If either argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression">
				<xs:attribute name="precision" type="DateTimePrecision" use="optional"/>
			</xs:extension>
		</xs:complexContent>
		<!-- ProperIncludedIn(i1, i2) = IncludedIn(i1, i2) and i1 <> i2 -->
	</xs:complexType>
	<xs:complexType name="Before">
		<xs:annotation>
			<xs:documentation>The Before operator is defined for Intervals, as well as DateTime values.
			
For the Interval overload, the Before operator returns true if the first interval ends before the second one starts. In other words, if the ending point of the first interval is less than the starting point of the second interval.
			
This operator uses the semantics described in the Start and End operators to determine interval boundaries.

For the DateTime overload, the Before operator returns true if the first datetime is before the second datetime at the specified level of precision.

If either argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression">
				<xs:attribute name="precision" type="DateTimePrecision" use="optional"/>
			</xs:extension>
		</xs:complexContent>
		<!-- Before(i1, i2) = End(i1) < Start(i2) -->
	</xs:complexType>
	<xs:complexType name="After">
		<xs:annotation>
			<xs:documentation>The After operator is defined for Intervals, as well as DateTime values.
			
For the Interval overload, the After operator returns true if the first interval starts after the second one ends. In other words, if the starting point of the first interval is greater than the ending point of the second interval.
			
This operator uses the semantics described in the Start and End operators to determine interval boundaries.

For the DateTime overload, the After operator returns true if the first datetime is after the second datetime at the specified level of precision.

If either argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression">
				<xs:attribute name="precision" type="DateTimePrecision" use="optional"/>
			</xs:extension>
		</xs:complexContent>
		<!-- After(i1, i2) = Start(i1) > End(i2) -->
	</xs:complexType>
	<xs:complexType name="Meets">
		<xs:annotation>
			<xs:documentation>The Meets operator returns true if the first interval ends immediately before the second interval starts, or if the first interval starts immediately after the second interval ends. In other words, if the ending point of the first interval is equal to the predecessor of the starting point of the second, or if the starting point of the first interval is equal to the successor of the ending point of the second.
			
This operator uses the semantics described in the Start and End operators to determine interval boundaries.

If either argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression">
				<xs:attribute name="precision" type="DateTimePrecision" use="optional"/>
			</xs:extension>
		</xs:complexContent>
		<!-- Meets(i1, i2) = End(i1) = Predecessor(Start(i2)) or End(i2) = Predecessor(Start(i1)) -->
	</xs:complexType>
	<xs:complexType name="MeetsBefore">
		<xs:annotation>
			<xs:documentation>The MeetsBefore operator returns true if the first interval ends immediately before the second interval starts. In other words, if the ending point of the first interval is equal to the predecessor of the starting point of the second.
			
This operator uses the semantics described in the Start and End operators to determine interval boundaries.

If either argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression">
				<xs:attribute name="precision" type="DateTimePrecision" use="optional"/>
			</xs:extension>
		</xs:complexContent>
		<!-- Meets(i1, i2) = End(i1) = Predecessor(Start(i2)) -->
	</xs:complexType>
	<xs:complexType name="MeetsAfter">
		<xs:annotation>
			<xs:documentation>The MeetsAfter operator returns true if the first interval starts immediately after the second interval ends. In other words, if the starting point of the first interval is equal to the successor of the ending point of the second.
			
This operator uses the semantics described in the Start and End operators to determine interval boundaries.

If either argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression">
				<xs:attribute name="precision" type="DateTimePrecision" use="optional"/>
			</xs:extension>
		</xs:complexContent>
		<!-- Meets(i1, i2) = End(i2) = Predecessor(Start(i1)) -->
	</xs:complexType>
	<xs:complexType name="Overlaps">
		<xs:annotation>
			<xs:documentation>The Overlaps operator returns true if the first interval overlaps the second. In other words, if the ending point of the first interval is greater than or equal to the starting point of the second interval, and the starting point of the first interval is less than or equal to the ending point of the second interval.
			
This operator uses the semantics described in the Start and End operators to determine interval boundaries.

If either argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression">
				<xs:attribute name="precision" type="DateTimePrecision" use="optional"/>
			</xs:extension>
		</xs:complexContent>
		<!-- Overlaps(i1, i2) = End(i1) >= Start(i2) and Start(i1) <= End(i2) -->
	</xs:complexType>
	<xs:complexType name="OverlapsBefore">
		<xs:annotation>
			<xs:documentation>The OverlapsBefore operator returns true if the first interval starts before and overlaps the second. In other words, if the first interval contains the starting point of the second interval.
			
This operator uses the semantics described in the Start and End operators to determine interval boundaries.

If either argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression">
				<xs:attribute name="precision" type="DateTimePrecision" use="optional"/>
			</xs:extension>
		</xs:complexContent>
		<!-- OverlapsBefore(i1, i2) = Contains(i1, Start(i2)) -->
	</xs:complexType>
	<xs:complexType name="OverlapsAfter">
		<xs:annotation>
			<xs:documentation>The OverlapsAfter operator returns true if the first interval overlaps and ends after the second. In other words, if the starting point of the first interval contains the ending point of the second interval.
			
This operator uses the semantics described in the Start and End operators to determine interval boundaries.

If either argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression">
				<xs:attribute name="precision" type="DateTimePrecision" use="optional"/>
			</xs:extension>
		</xs:complexContent>
		<!-- OverlapsAfter(i1, i2) = Contains(i1, End(i2)) -->
	</xs:complexType>
	<xs:complexType name="Starts">
		<xs:annotation>
			<xs:documentation>The Starts operator returns true if the first interval starts the second. In other words, if the starting point of the first is equal to the starting point of the second interval and the ending point of the first interval is less than or equal to the ending point of the second interval.

This operator uses the semantics described in the Start and End operators to determine interval boundaries.

If either argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression">
				<xs:attribute name="precision" type="DateTimePrecision" use="optional"/>
			</xs:extension>
		</xs:complexContent>
		<!-- Starts(i1, i2) = Start(i1) = Start(i2) and End(i1) <= End(i2) -->
	</xs:complexType>
	<xs:complexType name="Ends">
		<xs:annotation>
			<xs:documentation>The Ends operator returns true if the first interval ends the second. In other words, if the starting point of the first interval is greater than or equal to the starting point of the second, and the ending point of the first interval is equal to the ending point of the second.
			
This operator uses the semantics described in the Start and End operators to determine interval boundaries.

If either argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression">
				<xs:attribute name="precision" type="DateTimePrecision" use="optional"/>
			</xs:extension>
		</xs:complexContent>
		<!-- Ends(i1, i2) = Start(i1) >= Start(i2) and End(i1) = End(i2) -->
	</xs:complexType>
	<xs:complexType name="Collapse">
		<xs:annotation>
			<xs:documentation>The Collapse operator returns the unique set of intervals that completely covers the ranges present in the given list of intervals.

If the list of intervals is empty, the result is empty. If the list of intervals contains a single interval, the result is a list with that interval. If the list of intervals contains nulls, they will be excluded from the resulting list.

If the argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Union">
		<xs:annotation>
			<xs:documentation>The Union operator returns the union of its arguments.
			
This operator has two overloads:
	List
	Interval

For the list overload, this operator returns a list with all elements from both arguments.

For the interval overload, this operator returns the interval that starts at the earliest starting point in either argument, and ends at the latest starting point in either argument. If the arguments do not overlap, this operator returns null. 

If either argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Intersect">
		<xs:annotation>
			<xs:documentation>The Intersect operator returns the intersection of its arguments.
			
This operator has two overloads:
	List
	Interval

For the list overload, this operator returns a list with the elements that appear in both lists.

For the interval overload, this operator returns the interval that defines the overlapping portion of both arguments. If the arguments do not overlap, this operator returns null.

If either argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Except">
		<xs:annotation>
			<xs:documentation>The Except operator returns the set difference of the two arguments.
			
This operator has two overloads:
	List, List
	Interval, Interval

For the list overload, this operator returns a list with the elements that appear in the first operand, that do not appear in the second operand.

For the interval overload, this operator returns the portion of the first interval that does not overlap with the second. If the arguments do not overlap, or if the second argument is properly contained within the first, this operator returns null.

If either argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<!-- List/Set Operators -->
	<xs:complexType name="Exists">
		<xs:annotation>
			<xs:documentation>The Exists operator returns true if the list contains any elements.

If the argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<!-- Union (already defined) -->
	<!-- Intersect (already defined) -->
	<!-- Difference (already defined) -->
	<xs:complexType name="Times">
		<xs:annotation>
			<xs:documentation>The Times operator performs the cartesian product of two lists of tuples. The return type of a Times operator is a tuple with all the components from the tuple types of both arguments. The result will contain a tuple for each possible combination of tuples from both arguments with the values for each component derived from the pairing of the source tuples.
			
If either argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="BinaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Filter">
		<xs:annotation>
			<xs:documentation>The Filter operator returns a list with only those elements in the source list for which the condition element evaluates to true.
			
If the source argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="source" type="Expression" minOccurs="1" maxOccurs="1"/>
					<xs:element name="condition" type="Expression" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
				<xs:attribute name="scope" type="xs:string" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- Equal (already defined) -->
	<!-- NotEqual (already defined) -->
	<xs:complexType name="First">
		<xs:annotation>
			<xs:documentation>The First operator returns the first element in a list. If the order by attribute is specified, the list is sorted by that ordering prior to returning the first element.
			
If the argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="source" type="Expression"/>
				</xs:sequence>
				<xs:attribute name="orderBy" type="xs:string" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Last">
		<xs:annotation>
			<xs:documentation>The Last operator returns the last element in a list. If the order by attribute is specified, the list is sorted by that ordering prior to returning the last element.
			
If the argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="source" type="Expression"/>
				</xs:sequence>
				<xs:attribute name="orderBy" type="xs:string" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- Indexer (already defined) -->
	<xs:complexType name="IndexOf">
		<xs:annotation>
			<xs:documentation>The IndexOf operator returns the 1-based index of the given element in the given source list.

The operator uses equality semantics as defined in the Equal operator to determine the index. The search is linear, and returns the index of the first element for which the equality comparison returns true.

If the list is empty, or no element is found, the result is 0.

If either argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="source" type="Expression" minOccurs="1" maxOccurs="1"/>
					<xs:element name="element" type="Expression" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- Contains (already defined) -->
	<!-- In (already defined) -->
	<!-- Includes (alread defined) -->
	<!-- IncludedIn (already defined) -->
	<!-- ProperIncludes (already defined) -->
	<!-- ProperIncludedIn (already defined) -->
	<xs:complexType name="Expand">
		<xs:annotation>
			<xs:documentation>The Expand operator flattens a list of lists into a single list.
			
If the argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Sort">
		<xs:annotation>
			<xs:documentation>The Sort operator returns a list with all the elements in source, sorted as described by the by element.
			
If the argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="source" type="Expression"/>
					<xs:element name="by" type="SortByItem" minOccurs="1" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ForEach">
		<xs:annotation>
			<xs:documentation>The ForEach expression iterates over the list of elements in the source element, and returns a list with the same number of elements, where each element in the new list is the result of evaluating the element expression for each element in the source list.
			
If the source argument is null, the result is null.

If the element argument evaluates to null for some item in the source list, the resulting list will contain a null for that element.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="source" type="Expression" minOccurs="1" maxOccurs="1"/>
					<xs:element name="element" type="Expression" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
				<xs:attribute name="scope" type="xs:string" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Distinct">
		<xs:annotation>
			<xs:documentation>The Distinct operator takes a list of elements and returns a list containing only the unique elements within the input. For example, given the list of integers { 1, 1, 1, 2, 2, 3, 4, 4 }, the result of Distinct would be { 1, 2, 3, 4 }.
			
The operator uses equality comparison semantics as defined in the Equal operator.

If the source argument is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="source" type="Expression"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Current">
		<xs:annotation>
			<xs:documentation>The Current expression returns the value of the object currently in scope. For example, within a ForEach expression, this returns the current element being considered in the iteration.
			
It is an error to invoke the Current operator outside the context of a scoped operation.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="scope" type="xs:string" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SingletonFrom">
		<xs:annotation>
			<xs:documentation>The SingletonFrom expression extracts a single element from the source list. If the source list is empty, the result is null. If the source list contains one element, that element is returned. If the list contains more than one element, a run-time error is thrown. If the source list is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnaryExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<!-- Aggregate Operators -->
	<!-- TODO: Support grouping? -->
	<xs:complexType name="AggregateExpression" abstract="true">
		<xs:annotation>
			<xs:documentation>Aggregate expressions perform operations on lists of data, either directly on a list of scalars, or indirectly on a list of objects, with a reference to a property present on each object in the list.
			
Aggregate expressions deal with missing information by excluding missing values from consideration before performing the aggregated operation. For example, in a Sum over Dose, any instance of Medication with no value for Dose would be ignored.

An aggregate operation performed over an empty list is defined to return null, except as noted in the documentation for each operator (Count, AllTrue, and AnyTrue are the exceptions).</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="source" type="Expression" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
				<xs:attribute name="path" type="xs:string" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Count">
		<xs:annotation>
			<xs:documentation>The Count operator returns the number of non-null elements in the source.
			
If a path is specified, the count returns the number of elements that have a value for the property specified by the path.

If the list is empty, the result is 0.

If the list is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="AggregateExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Sum">
		<xs:annotation>
			<xs:documentation>The Sum operator returns the sum of non-null elements in the source.
			
If a path is specified, elements with no value for the property specified by the path are ignored. 

If the source contains no non-null elements, null is returned.

If the list is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="AggregateExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Min">
		<xs:annotation>
			<xs:documentation>The Min operator returns the minimum element in the source. 
			
If a path is specified, elements with no value for the property specified by the path are ignored.

If the source contains no non-null elements, null is returned.

If the source is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="AggregateExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Max">
		<xs:annotation>
			<xs:documentation>The Max operator returns the maximum element in the source.

If a path is specified, elements with no value for the property specified by the path are ignored.

If the source contains no non-null elements, null is returned.

If the source is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="AggregateExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Avg">
		<xs:annotation>
			<xs:documentation>The Avg operator returns the average of the elements in source.
			
If a path is specified, elements with no value for the property specified by the path are ignored.
			
If the source contains no non-null elements, null is returned.

If the source is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="AggregateExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Median">
		<xs:annotation>
			<xs:documentation>The Median operator returns the median of the elements in source.
			
If a path is specified, elements with no value for the property specified by the path are ignored.

If the source contains no non-null elements, null is returned.

If the source is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="AggregateExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Mode">
		<xs:annotation>
			<xs:documentation>The Mode operator returns the statistical mode of the elements in source.
			
If a path is specified, elements with no value for the property specified by the path are ignored.

If the source contains no non-null elements, null is returned.

If the source is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="AggregateExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Variance">
		<xs:annotation>
			<xs:documentation>The Variance operator returns the statistical variance of the elements in source.
			
If a path is specified, elements with no value for the property specified by the path are ignored.

If the source contains no non-null elements, null is returned.

If the source is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="AggregateExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="PopulationVariance">
		<xs:annotation>
			<xs:documentation>The PopulationVariance operator returns the statistical population variance of the elements in source.
			
If a path is specified, elements with no value for the property specified by the path are ignored.

If the source contains no non-null elements, null is returned.

If the source is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="AggregateExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="StdDev">
		<xs:annotation>
			<xs:documentation>The StdDev operator returns the statistical standard deviation of the elements in source.
			
If a path is specified, elements with no value for the property specified by the path are ignored.

If the source contains no non-null elements, null is returned.

If the list is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="AggregateExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="PopulationStdDev">
		<xs:annotation>
			<xs:documentation>The PopulationStdDev operator returns the statistical standard deviation of the elements in source.
			
If a path is specified, elements with no value for the property specified by the path are ignored.

If the source contains no non-null elements, null is returned.

If the source is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="AggregateExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="AllTrue">
		<xs:annotation>
			<xs:documentation>The AllTrue operator returns true if all the non-null elements in source are true.
			
If a path is specified, elements with no value for the property specified by the path are ignored.

If the source contains no non-null elements, true is returned.

If the source is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="AggregateExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="AnyTrue">
		<xs:annotation>
			<xs:documentation>The AnyTrue operator returns true if any non-null element in source is true.
			
If a path is specified, elements with no value for the property specified by the path are ignored.

If the source contains no non-null elements, false is returned.

If the source is null, the result is null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="AggregateExpression"/>
		</xs:complexContent>
	</xs:complexType>
	<!-- Data Operators -->
	<xs:complexType name="Property">
		<xs:annotation>
			<xs:documentation>The Property operator returns the value of the property on source specified by the path attribute.
			
If the path attribute contains qualifiers, each qualifier is traversed to obtain the actual value.

If a scope is specified, the name is used to resolve the scope in which the path will be resolved. Scopes can be named by operators such as Filter and ForEach.

Property expressions can also be used to access the individual points and closed indicators for interval types using the property names low, high, lowClosed, and highClosed.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="source" type="Expression" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
				<xs:attribute name="path" type="xs:string" use="required"/>
				<xs:attribute name="scope" type="xs:string" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- Queries -->
	<xs:complexType name="AliasedQuerySource">
		<xs:annotation>
			<xs:documentation>The AliasedQuerySource element defines a single source for inclusion in a query context. The type of the source is determined by the expression element, and the source can be accessed within the query context by the given alias.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Element">
				<xs:sequence>
					<xs:element name="expression" type="Expression"/>
				</xs:sequence>
				<xs:attribute name="alias" type="xs:string" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="DefineClause">
		<xs:annotation>
			<xs:documentation>The DefineClause element allows any number of expression definitions to be introduced within a query context. Defined expressions can be referenced by name within the query context.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Element">
				<xs:sequence>
					<xs:element name="expression" type="Expression"/>
				</xs:sequence>
				<xs:attribute name="identifier" type="xs:string" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="RelationshipClause" abstract="true">
		<xs:annotation>
			<xs:documentation>The RelationshipClause element allows related sources to be used to restrict the elements included from another source in a query context. Note that the elements referenced by the relationship clause can only be accessed within the suchThat condition, and that elements of the related source are not included in the query context.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="AliasedQuerySource">
				<xs:sequence>
					<xs:element name="suchThat" type="Expression" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="With">
		<xs:annotation>
			<xs:documentation>The With clause restricts the elements of a given source to only those elements that have elements in the related source that satisfy the suchThat condition. This operation is known as a semi-join in database languages.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="RelationshipClause"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Without">
		<xs:annotation>
			<xs:documentation>The Without clause restricts the elements of a given source to only those elements that do not have elements in the related source that satisfy the suchThat condition. This operation is known as a semi-difference in database languages.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="RelationshipClause"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:simpleType name="SortDirection">
		<xs:restriction base="xs:string">
			<xs:enumeration value="asc"/>
			<xs:enumeration value="ascending"/>
			<xs:enumeration value="desc"/>
			<xs:enumeration value="descending"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="SortByItem" abstract="true">
		<xs:complexContent>
			<xs:extension base="Element">
				<xs:attribute name="direction" type="SortDirection"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ByDirection">
		<xs:annotation>
			<xs:documentation>The ByDirection element specifies that the sort should be performed using the given direction. This approach is used when the result of the query is a list of non-tuple elements and only the sort direction needs to be specified.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="SortByItem"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ByColumn">
		<xs:annotation>
			<xs:documentation>The ByColumn element specifies that the sort should be performed using the given column and direction. This approach is used to specify the sort order for a query when the result is a list of tuples.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="SortByItem">
				<xs:attribute name="path" type="xs:string"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ByExpression">
		<xs:annotation>
			<xs:documentation>The ByExpression element specifies that the sort should be performed using the given expression and direction. This approach is used to specify the sort order as a calculated expression.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="SortByItem">
				<xs:sequence>
					<xs:element name="expression" type="Expression" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SortClause">
		<xs:annotation>
			<xs:documentation>The SortClause element defines the sort order for the query.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Element">
				<xs:sequence>
					<xs:element name="by" type="SortByItem" minOccurs="1" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ReturnClause">
		<xs:annotation>
			<xs:documentation>The ReturnClause element defines the shape of the result set of the query.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Element">
				<xs:sequence>
					<xs:element name="expression" type="Expression" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
				<xs:attribute name="distinct" type="xs:boolean" use="optional" default="true"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Query">
		<xs:annotation>
			<xs:documentation>The Query operator represents a clause-based query. The result of the query is determined by the type of sources included, as well as the clauses used in the query.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="source" type="AliasedQuerySource" minOccurs="1" maxOccurs="unbounded"/>
					<xs:element name="define" type="DefineClause" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element name="relationship" type="RelationshipClause" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element name="where" type="Expression" minOccurs="0" maxOccurs="1"/>
					<xs:element name="return" type="ReturnClause" minOccurs="0" maxOccurs="1"/>
					<xs:element name="sort" type="SortClause" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="AliasRef">
		<xs:annotation>
			<xs:documentation>The AliasRef expression allows for the reference of a specific source within the context of a query.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="name" type="xs:string"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="QueryDefineRef">
		<xs:annotation>
			<xs:documentation>The QueryDefineRef expression allows for the reference of a specific define within the context of a query.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="name" type="xs:string"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
</xs:schema>
